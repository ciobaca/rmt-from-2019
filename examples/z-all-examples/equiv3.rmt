/* any file begins with the declaration of all sorts used */
smt-prelude
"(declare-fun iS1 (Int Int Int Int) Int)
 (declare-fun iE1 (Int Int) Int)
 (declare-datatypes () ((Var varX varY varZ varC1 varC2 varV1 varV2)))
"

sorts IntP,
      BoolP,
      Var / "Var",
      AExp,
      BExp,
      NonValAExp,
      NonValBExp,
      Stmt,
      Code,
      CompStack,
      Map / "(Array Var Int)",
      CfgI,
      State;

subsort Int < IntP;
subsort IntP < AExp;
subsort Var < NonValAExp;
subsort NonValAExp < AExp;
subsort NonValBExp < BExp;
subsort AExp BExp Stmt < Code;
subsort Bool < BoolP;
subsort BoolP < BExp;
subsort AExp < Stmt;
subsort BExp < Stmt;

/* next we must declare all function symbols */
signature
	pair : CfgI CfgI -> State,

	mapequals : Map Map -> Bool / "=",

	// some program variables
	x : -> Var / "varX",
	y : -> Var / "varY",
	z : -> Var / "varZ",

	pV1 : -> Var / "varV1",
	pV2 : -> Var / "varV2",
	pC1 : -> Var / "varC1",
	pC2 : -> Var / "varC2",
	
	pS1 : -> Stmt,
	pE1 : -> NonValAExp,
	iS1 : Int Int Int Int -> Int / "iS1",
	iE1 : Int Int -> Int / "iE1",

	// helper functions
	synEq : Var Var -> Bool / "=",

	update : Map Var Int -> Map / "store",
	lookup  : Map Var -> IntP / "select",

	// arithmetic and boolean expressions
	plus : AExp AExp -> NonValAExp,
	plushl : AExp -> AExp,
    	plushr : AExp -> AExp,

	minus : AExp AExp -> NonValAExp,
	minushl : AExp -> AExp,
    	minushr : AExp -> AExp,

	pred : AExp -> NonValAExp,
	predh : -> Stmt,

	succ : AExp -> NonValAExp,
	succh : -> Stmt,

	le   : AExp AExp -> NonValBExp,
    	lehl : AExp -> BExp,
    	lehr : AExp -> BExp,

	less   : AExp AExp -> NonValBExp,
    	lesshl : AExp -> BExp,
    	lesshr : AExp -> BExp,

	not : BExp -> NonValBExp,
	noth : -> Stmt,

	// computation stack
	done : -> CompStack,
	push : Code CompStack -> CompStack,

	// configuration
	I : CompStack Map -> CfgI,

	// statements
	assign : Var AExp -> Stmt,
    	assignh : Var -> Stmt,

	skip : -> Stmt,

	seq : Stmt Stmt -> Stmt,

	ite : BExp Stmt Stmt -> Stmt,
	iteh : Stmt Stmt -> Stmt,

	while : BExp Stmt -> Stmt,

	for : Var AExp AExp Stmt -> Stmt,
	forhl : Var AExp Stmt -> Stmt,
	forhr : Var AExp Stmt -> Stmt;

/* next we must declare all variables */
variables
	// necessary variables
	X : Var,
	Y : Var,
	Z : Var,

	N : Int,
	J : Int,
	M : Int,
	SUM : Int,

	B : Bool,
	BE : BExp,
	BE1 : BExp,
	BE2 : BExp,
	AE : AExp,
	AE1 : AExp,
	AE2 : AExp,
	NVAE : NonValAExp,
	NVAE1 : NonValAExp,
	NVAE2 : NonValAExp,
	NVBE : NonValBExp,
	NVBE1 : NonValBExp,
	NVBE2 : NonValBExp,
	S : Stmt,
	S1 : Stmt,
	S2 : Stmt,
	S3 : Stmt,
	S4 : Stmt,
	REST : CompStack,
	ENV : Map,
	ENVP : Map,
	ENV1 : Map,
	ENV2 : Map;

/* next, declare all rewrite rules */
constrained-rewrite-system language
// language
 	(I (push X              REST) ENV) =>
 	(I (push (lookup ENV X) REST) ENV),

	(I (push (pred N)            REST) ENV) =>
	(I (push (mminus N 1)    REST) ENV),

	(I (push (pred NVAE)       REST)  ENV) =>
	(I (push NVAE (push predh REST)) ENV),

	(I (push N (push predh REST)) ENV) =>
	(I (push (pred N)       REST)  ENV),

	(I (push (not B)  REST) ENV) =>
	(I (push (bnot B) REST) ENV),

	(I (push (not NVBE)       REST)  ENV) =>
	(I (push NVBE (push noth REST)) ENV),

	(I (push B (push noth REST)) ENV) =>
	(I (push (not B)       REST)  ENV),


	(I (push (succ N)           REST) ENV) =>
	(I (push (mplus N 1)    REST) ENV),

	(I (push (succ NVAE)       REST)  ENV) =>
	(I (push NVAE (push succh REST)) ENV),

	(I (push N (push succh REST)) ENV) =>
	(I (push (succ N)       REST)  ENV),

	(I (push (assign X N) REST) ENV) =>
        (I REST       (update ENV X N)),
    
 	(I (push (assign X NVAE)       REST)  ENV) =>
 	(I (push NVAE (push (assignh X) REST)) ENV),

     	(I (push N (push (assignh X) REST)) ENV) =>
     	(I (push (assign X N)        REST)  ENV),

// sequential composition
	(I (push (seq S1 S2) REST)  ENV) =>
	(I (push S1 (push S2 REST)) ENV),

	(I (push skip REST) ENV) =>
	(I            REST  ENV),

// conditional statement

	(I (push (ite NVBE S1 S2)       REST)  ENV) =>
	(I (push NVBE (push (iteh S1 S2) REST)) ENV),

	(I (push B (push (iteh S1 S2) REST)) ENV) =>
	(I (push (ite B S1 S2)       REST)  ENV),

	(I (push (ite true S1 S2) REST) ENV) =>
	(I (push S1                REST) ENV),

 	(I (push (ite false S1 S2) REST) ENV) =>
 	(I (push S2                 REST) ENV),

// while statement
 	(I (push (while BE S)                        REST) ENV) =>
 	(I (push (ite BE (seq S (while BE S)) skip) REST) ENV),

// addition operator
 	(I (push (plus N M)     REST) ENV) =>
 	(I (push (mplus N M)    REST) ENV),

	(I (push (plus NVAE1 AE2)        REST)  ENV) =>
	(I (push NVAE1 (push (plushl AE2) REST)) ENV),
  
 	(I (push N (push (plushl AE2) REST)) ENV) =>
 	(I (push (plus N AE2)        REST)  ENV),

 	(I (push (plus N NVAE2)        REST)  ENV) =>
 	(I (push NVAE2 (push (plushr N) REST)) ENV),

 	(I (push M (push (plushr N) REST)) ENV) =>
 	(I (push (plus N M)        REST)  ENV),

// subtraction operator
 	(I (push (minus N M)     REST) ENV) =>
 	(I (push (mminus N M)    REST) ENV),

	(I (push (minus NVAE1 AE2)        REST)  ENV) =>
	(I (push NVAE1 (push (minushl AE2) REST)) ENV),
  
 	(I (push N (push (minushl AE2) REST)) ENV) =>
 	(I (push (minus N AE2)        REST)  ENV),

 	(I (push (minus N NVAE2)        REST)  ENV) =>
 	(I (push NVAE2 (push (minushr N) REST)) ENV),

 	(I (push M (push (minushr N) REST)) ENV) =>
 	(I (push (minus N M)        REST)  ENV),

// for statement
 	(I (push (for X NVAE1 NVAE2 S)        REST ) ENV) =>
 	(I (push NVAE1 (push (forhl X NVAE2 S) REST)) ENV),

 	(I (push N (push (forhl X NVAE2 S) REST)) ENV) =>
 	(I (push (for X N NVAE2 S)        REST)  ENV),

 	(I (push (for X N NVAE2 S)            REST ) ENV) =>
 	(I (push NVAE2 (push (forhr X N S)     REST)) ENV),

 	(I (push M (push (forhr X N S) REST)) ENV) =>
 	(I (push (for X N M S)        REST)  ENV),

	(I (push (for X N M S)                                         REST) ENV) /\ (mle N M) =>
	(I (push (seq (assign X N) S) (push (for X (mplus N 1) M S) REST)) ENV),

	(I (push (for X N M S) REST) ENV) /\ (bnot (mle N M)) =>
	(I                       REST ENV),

// less than or equal to operator2

 	(I (push (le N M)  REST) ENV) =>
 	(I (push (mle N M) REST) ENV),

 	(I (push (le NVAE1 AE2)        REST)  ENV) =>
 	(I (push NVAE1 (push (lehl AE2) REST)) ENV),

 	(I (push N (push (lehl AE2) REST)) ENV) =>
 	(I (push (le N AE2)        REST)  ENV),

 	(I (push (le N NVAE2)        REST)  ENV) =>
 	(I (push NVAE2 (push (lehr N) REST)) ENV),
  
 	(I (push M (push (lehr N) REST)) ENV) =>
 	(I (push (le N M)       REST)  ENV),

// strictly less than

 	(I (push (less N M)  REST) ENV) =>
 	(I (push (mless N M) REST) ENV),

 	(I (push (less NVAE1 AE2)        REST)  ENV) =>
 	(I (push NVAE1 (push (lesshl AE2) REST)) ENV),

 	(I (push N (push (lesshl AE2) REST)) ENV) =>
 	(I (push (less N AE2)        REST)  ENV),

 	(I (push (less N NVAE2)        REST)  ENV) =>
 	(I (push NVAE2 (push (lesshr N) REST)) ENV),
  
 	(I (push M (push (lesshr N) REST)) ENV) =>
 	(I (push (less N M)       REST)  ENV),

// symbolic variables statements and expressions
   	(I (push pE1 REST) ENV) =>
	(I (push (iE1 (lookup ENV pC2) (lookup ENV pV2)) REST) ENV),

	(I (push pS1 REST) ENV) =>
	(I REST (update ENV pC1 (iS1 (lookup ENV pC1) (lookup ENV pC2) (lookup ENV pV1) (lookup ENV pV2))))
;

//search [3,3] in language :
//	(I (push (assign x 1) done) emp);

show-equivalent [40, 2] in language and language :
//    (pair 
// 	(I (push (for x 1 N pS1) done) ENV),
// 	(I (push (ite (le 1 N) (seq (assign x 1) (while (le x N) (seq pS1 (assign x (plus x 1))))) skip) done) ENV))

// ,
   (pair 
	(I (push (for x M N pS1) done) ENV)

	(I (push (assign x M) (push (while (less x N) (seq pS1 (assign x (plus x 1)))) done)) ENV)) /\ (mle M N)

with-base
   (pair (I done ENV) (I done ENVP)) /\ (mequals (lookup ENV x) (lookup ENVP x));
