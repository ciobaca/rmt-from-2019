smt-prelude "(define-fun-rec gcd ((x Int) (y Int)) Int
     (ite (= y 0)
      x
      (gcd y (mod x y))
     )
)"

sorts State;

signature
  mgcd : Int Int -> Int / "gcd",
  mmod : Int Int -> Int / "mod",

  init : Int Int -> State, loop : Int Int Int Int -> State, done : Int Int Int -> State,
  ok : Int Int -> State;

variables S : Int, N : Int, I : Int, J : Int, X : Int, Y : Int, Z : Int, A : Int, B : Int,
 C : Int, D : Int;

constrained-rewrite-system gcd
  (init X Y) => (loop X Y X Y),

  (loop I J X Y) /\ (bnot (mequals Y 0)) =>
  (loop I J Y (mmod X Y)),

  (loop I J X Y) /\ (mequals Y 0) => (done I J X),

  (done I J (mgcd I J)) => (ok I J);

constrained-rewrite-system circ
  (init X Y) => (ok X Y),

  (loop I J X Y) /\ (mequals (mgcd I J) (mgcd X Y)) => (ok I J);

prove in gcd : circ;
