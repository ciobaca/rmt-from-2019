/*

This example illustrates a rewrite system that computes the gcd of two
integers.

Run the example with

./main -v 0 < example8.rmt

The expected output is:

Proving circularity #1:
--------
    - init(X,Y) if false -----> done((gcd X Y))
    - init(X,Y) if false =(C)=> done((gcd X Y))
        - loop(X,Y) if false -----> done((gcd X Y))
            - done((gcd X Y)) if true -----> done((gcd X Y))
            - done((gcd X Y)) if false =(C)=> done((gcd X Y))
            - done((gcd X Y)) if false =(R)=> done((gcd X Y))
        * Proved that done((gcd X Y)) if true => done((gcd X Y))
        - loop(X,Y) if _existsInt(Y_1,_existsInt(X_1,true)) =(C)=> done((gcd X Y))
        - loop(X,Y) if (not (exists ((Y_1 Int)) (exists ((X_1 Int)) true))) =(R)=> done((gcd X Y))
    * Proved that loop(X,Y) if true => done((gcd X Y))
    - init(X,Y) if true =(R)=> done((gcd X Y))
* Proved that init(X,Y) if true => done((gcd X Y))
--------
Circularity #1 proved.

Proving circularity #2:
--------
    - loop(X,Y) if false -----> done((gcd X Y))
    - loop(X,Y) if false =(C)=> done((gcd X Y))
        - loop(Y,(mod X Y)) if false -----> done((gcd X Y))
            - done((gcd Y (mod X Y))) if (not (= Y 0)) -----> done((gcd X Y))
            - done((gcd Y (mod X Y))) if false =(C)=> done((gcd X Y))
            - done((gcd Y (mod X Y))) if false =(R)=> done((gcd X Y))
        * Proved that done((gcd Y (mod X Y))) if (not (= Y 0)) => done((gcd X Y))
        - loop(Y,(mod X Y)) if (and (not (= Y 0)) (exists ((Y_6 Int)) (exists ((X_6 Int)) (not (= Y 0))))) =(C)=> done((gcd X Y))
        - loop(Y,(mod X Y)) if (and (not (= Y 0)) (not (exists ((Y_6 Int)) (exists ((X_6 Int)) (not (= Y 0)))))) =(R)=> done((gcd X Y))
    * Proved that loop(Y,(mod X Y)) if (not (= Y 0)) => done((gcd X Y))
        - done(X) if (= Y 0) -----> done((gcd X Y))
        - done(X) if false =(C)=> done((gcd X Y))
        - done(X) if false =(R)=> done((gcd X Y))
    * Proved that done(X) if (= Y 0) => done((gcd X Y))
    - loop(X,Y) if true =(R)=> done((gcd X Y))
* Proved that loop(X,Y) if true => done((gcd X Y))
--------
Circularity #2 proved.
*/

/*

We use the prelude to define the gcd function by repeated division.

*/
// smt-prelude "
// (declare-fun gcd (Int Int) Int)
// (assert (forall ((x Int) (y Int))
// (= (gcd x y)
//      (ite (= y 0)
//       x
//       (gcd y (mod x y))
//      )
// )))"

sorts State;

signature 
  init : Int Int -> State, loop : Int Int -> State, done : Int -> State,
  ok : Int Int -> State;

variables S : Int, N : Int, I : Int, J : Int, X : Int, Y : Int, Z : Int, A : Int, B : Int,
 C : Int, D : Int, BB : Bool;

builtins mgcd : Int Int -> Int;

assert (_forallInt X (_forallInt Y
       (mequals (mgcd X Y) (iteInt (mequals Y 0) X (mgcd Y (mmod X Y))))));

constrained-rewrite-system gcd
  (init X Y) => (loop X Y),

  (loop X Y) /\ (bnot (mequals Y 0)) =>
  (loop Y (mmod X Y)),

  (loop X Y) /\ (mequals Y 0) =>
  (done X);

constrained-rewrite-system circ
  (init X Y) => (done (mgcd X Y)),

  (loop X Y) => (done (mgcd X Y));

// there is no surprize that the proof goes through
prove [5,2] in gcd : circ;
