sorts IntP,
      BoolP,
      Var,
      AExp,
      BExp,
      NonValAExp,
      NonValBExp,
      Stmt,
      Code,
      CompStack,
      Map / "(Array Int Int)",
      CfgI,
      State;

subsort Int < IntP;
subsort IntP < AExp;
subsort Var < NonValAExp;
subsort NonValAExp < AExp;
subsort NonValBExp < BExp;
subsort AExp BExp Stmt < Code;
subsort Bool < BoolP;
subsort BoolP < BExp;
subsort AExp < Stmt;
subsort BExp < Stmt;

signature
	pair : CfgI CfgI -> State,

	mapequals : Map Map -> Bool / "=",

	// program variables
	var : Int -> Var,
	
	// helper functions
	update : Map Int Int -> Map / "store",
	lookup : Map Int -> Int / "select",

	// arithmetic and boolean expressions
	plus : AExp AExp -> NonValAExp,
	plushl : AExp -> AExp,
    	plushr : AExp -> AExp,

	minus : AExp AExp -> NonValAExp,
	minushl : AExp -> AExp,
    	minushr : AExp -> AExp,

	pred : AExp -> NonValAExp,
	predh : -> Stmt,

	succ : AExp -> NonValAExp,
	succh : -> Stmt,

	le   : AExp AExp -> NonValBExp,
    	lehl : AExp -> BExp,
    	lehr : AExp -> BExp,

	less   : AExp AExp -> NonValBExp,
    	lesshl : AExp -> BExp,
    	lesshr : AExp -> BExp,

	not : BExp -> NonValBExp,
	noth : -> Stmt,

	// computation stack
	done : -> CompStack,
	push : Code CompStack -> CompStack,

	// configuration
	I : CompStack Map -> CfgI,

	// statements
	assign : Var AExp -> Stmt,
    	assignh : Var -> Stmt,

	skip : -> Stmt,

	seq : Stmt Stmt -> Stmt,

	ite : BExp Stmt Stmt -> Stmt,
	iteh : Stmt Stmt -> Stmt,

	while : BExp Stmt -> Stmt,

	for : Var AExp AExp Stmt -> Stmt,
	forhl : Var AExp Stmt -> Stmt,
	forhr : Var AExp Stmt -> Stmt;

/* next we must declare all variables */
variables
	// necessary variables

	N : Int,
	J : Int,
	X : Int,
	M : Int,
	SUM : Int,

	B : Bool,
	BE : BExp,
	BE1 : BExp,
	BE2 : BExp,
	AE : AExp,
	AE1 : AExp,
	AE2 : AExp,
	NVAE : NonValAExp,
	NVAE1 : NonValAExp,
	NVAE2 : NonValAExp,
	NVBE : NonValBExp,
	NVBE1 : NonValBExp,
	NVBE2 : NonValBExp,
	S : Stmt,
	S1 : Stmt,
	S2 : Stmt,
	S3 : Stmt,
	S4 : Stmt,
	REST : CompStack,
	ENV : Map,
	ENVP : Map,
	ENV1 : Map,
	ENV2 : Map,
	ENV3 : Map,
	ENV4 : Map;

/* next, declare all rewrite rules */
constrained-rewrite-system language
// language
 	(I (push (var X)              REST) ENV) =>
 	(I (push (lookup ENV X) REST) ENV),


	(I (push (pred N)            REST) ENV) =>
	(I (push (mminus N 1)    REST) ENV),

	(I (push (pred NVAE)       REST)  ENV) =>
	(I (push NVAE (push predh REST)) ENV),

	(I (push N (push predh REST)) ENV) =>
	(I (push (pred N)       REST)  ENV),

	
	(I (push (not B)  REST) ENV) =>
	(I (push (bnot B) REST) ENV),

	(I (push (not NVBE)       REST)  ENV) =>
	(I (push NVBE (push noth REST)) ENV),

	(I (push B (push noth REST)) ENV) =>
	(I (push (not B)       REST)  ENV),


	(I (push (succ N)           REST) ENV) =>
	(I (push (mplus N 1)    REST) ENV),

	(I (push (succ NVAE)       REST)  ENV) =>
	(I (push NVAE (push succh REST)) ENV),

	(I (push N (push succh REST)) ENV) =>
	(I (push (succ N)       REST)  ENV),


	(I (push (assign (var X) N) REST) ENV) =>
        (I REST (update ENV X N)),
    
 	(I (push (assign (var X) NVAE)       REST)  ENV) =>
 	(I (push NVAE (push (assignh (var X)) REST)) ENV),

     	(I (push N (push (assignh (var X)) REST)) ENV) =>
     	(I (push (assign (var X) N)        REST)  ENV),

// sequential composition
	(I (push (seq S1 S2) REST)  ENV) =>
	(I (push S1 (push S2 REST)) ENV),

	(I (push skip REST) ENV) =>
	(I            REST  ENV),

// conditional statement

	(I (push (ite NVBE S1 S2)       REST)  ENV) =>
	(I (push NVBE (push (iteh S1 S2) REST)) ENV),

	(I (push B (push (iteh S1 S2) REST)) ENV) =>
	(I (push (ite B S1 S2)       REST)  ENV),

	(I (push (ite true S1 S2) REST) ENV) =>
	(I (push S1                REST) ENV),

 	(I (push (ite false S1 S2) REST) ENV) =>
 	(I (push S2                 REST) ENV),

// while statement
 	(I (push (while BE S)                        REST) ENV) =>
 	(I (push (ite BE (seq S (while BE S)) skip) REST) ENV),

// addition operator
 	(I (push (plus N M)     REST) ENV) =>
 	(I (push (mplus N M)    REST) ENV),

	(I (push (plus NVAE1 AE2)        REST)  ENV) =>
	(I (push NVAE1 (push (plushl AE2) REST)) ENV),
  
 	(I (push N (push (plushl AE2) REST)) ENV) =>
 	(I (push (plus N AE2)        REST)  ENV),

 	(I (push (plus N NVAE2)        REST)  ENV) =>
 	(I (push NVAE2 (push (plushr N) REST)) ENV),

 	(I (push M (push (plushr N) REST)) ENV) =>
 	(I (push (plus N M)        REST)  ENV),

// subtraction operator
 	(I (push (minus N M)     REST) ENV) =>
 	(I (push (mminus N M)    REST) ENV),

	(I (push (minus NVAE1 AE2)        REST)  ENV) =>
	(I (push NVAE1 (push (minushl AE2) REST)) ENV),
  
 	(I (push N (push (minushl AE2) REST)) ENV) =>
 	(I (push (minus N AE2)        REST)  ENV),

 	(I (push (minus N NVAE2)        REST)  ENV) =>
 	(I (push NVAE2 (push (minushr N) REST)) ENV),

 	(I (push M (push (minushr N) REST)) ENV) =>
 	(I (push (minus N M)        REST)  ENV),

// less than or equal to operator2
 	(I (push (le N M)  REST) ENV) =>
 	(I (push (mle N M) REST) ENV),

 	(I (push (le NVAE1 AE2)        REST)  ENV) =>
 	(I (push NVAE1 (push (lehl AE2) REST)) ENV),

 	(I (push N (push (lehl AE2) REST)) ENV) =>
 	(I (push (le N AE2)        REST)  ENV),

 	(I (push (le N NVAE2)        REST)  ENV) =>
 	(I (push NVAE2 (push (lehr N) REST)) ENV),
  
 	(I (push M (push (lehr N) REST)) ENV) =>
 	(I (push (le N M)       REST)  ENV),

// strictly less than
 	(I (push (less N M)  REST) ENV) =>
 	(I (push (mless N M) REST) ENV),

 	(I (push (less NVAE1 AE2)        REST)  ENV) =>
 	(I (push NVAE1 (push (lesshl AE2) REST)) ENV),

 	(I (push N (push (lesshl AE2) REST)) ENV) =>
 	(I (push (less N AE2)        REST)  ENV),

 	(I (push (less N NVAE2)        REST)  ENV) =>
 	(I (push NVAE2 (push (lesshr N) REST)) ENV),
  
 	(I (push M (push (lesshr N) REST)) ENV) =>
 	(I (push (less N M)       REST)  ENV)
;

// show-equivalent [40, 2] in language and language :
// (pair 

//   (I (push (assign (var 0) M) (push (while (le (var 0) N) (seq (assign (var 1) (plus (var 1) 1)) (assign (var 0) (plus (var 0) 1)))) done)) ENV2)

//   (I (push (assign (var 0) M) (push (while (le (var 0) N) (seq (assign (var 1) (plus (var 1) 1)) (assign (var 0) (plus (var 0) 1)))) done)) ENV2)
// )
// with-base
// (pair (I done ENV3) (I done ENV4)) /\ (mequals (lookup ENV3 0) (lookup ENV4 0));

// search in language :
// (pair
// (I (push
//        (seq (assign (var 0) N)                            // x <- N
//        (seq (assign (var 1) 0)                            // y <- 0
//        (seq (assign (var 2) 0)                            // z <- 0
//        (while (le (var 2) (var 1))                              // while y <= x
//               (seq (assign (var 2) (plus (var 2) (var 1)))            //   z <- z + y
//               (assign (var 2) (plus (var 2) 1)))))))     //   y <- y - 1
//      done) ENV)
// (I (push
//        (seq (assign (var 0) N)                            // x <- N
//        (seq (assign (var 1) 0)                            // y <- 0
//        (seq (assign (var 2) 0)                            // z <- 0
//        (while (le (var 2) (var 1))                              // while y <= x
//               (seq (assign (var 2) (plus (var 2) (var 1)))            //   z <- z + y
//               (assign (var 2) (plus (var 2) 1)))))))     //   y <- y - 1
//      done) ENV)
// ) /\ (mle 0 N)
// ;

// search in language :
// (pair

// (I (push
//        (seq (assign (var 0) N)                            // x <- N
//             (assign (var 1) 0))                            // y <- 0
//      done) ENV)
   
// (I (push
//        (seq (assign (var 0) N)                            // x <- N
//             (assign (var 1) 0))                            // y <- 0
//      done) ENV))

// /\

// (mle 0 N);

// run in language :

// (I (push
//        (seq (assign (var 0) 0)                               // x <- 0
//        (seq (assign (var 1) 0)                               // s <- 0
//        (while (le (var 0) 4)                                 // while x <= N
//               (seq (ite true                                       // if B
// 	                (assign (var 1) (plus (var 1) (var 0)))    //    then s := s + x
// 			(assign (var 1) (minus (var 1) (var 0))))  //    else s := s - x
//                    (assign (var 0) (plus (var 0) 1))))))           // x :- x + 1
//      done) ENV);

show-equivalent [ 900, 10 ] in language and language :
(pair
(I (push
       (seq (assign (var 0) 0)                               // x <- 0
       (seq (assign (var 1) 0)                               // s <- 0
       (while (le (var 0) N)                                 // while x <= N
              (seq (ite B                                          // if B
	                (assign (var 1) (plus (var 1) (var 0)))    //    then s := s + x
			(assign (var 1) (minus (var 1) (var 0))))  //    else s := s - x
                   (assign (var 0) (plus (var 0) 1))))))           // x :- x + 1
     done) ENV)
(I (push
       (seq (assign (var 0) 0)                               // x <- 0
       (seq (assign (var 1) 0)                               // s <- 0
       (ite B
        (while (le (var 0) N)                                // while x <= N
              (seq 
	           (assign (var 1) (plus (var 1) (var 0)))   // s := s + x
                   (assign (var 0) (plus (var 0) 1)))        // x :- x + 1
		   )
	(while (le (var 0) N)                                // while x <= N
              (seq 
                   (assign (var 1) (minus (var 1) (var 0)))  // s := s - x
                   (assign (var 0) (plus (var 0) 1)))))      // x :- x + 1
		   ))           
     done) ENV)
)
/\ (band (mle 0 N) (mle N 6))
with-base
(pair (I done ENV1)
      (I done ENV2)) /\
(mequals (lookup ENV1 1) (lookup ENV2 1));
