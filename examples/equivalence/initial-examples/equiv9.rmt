// EQUIVALENCE OF TWO PROGRAMS
// THAT BOTH COMPUTE THE COLLATZ SEQUENCE


sorts IntP,
      BoolP,
      Var,
      AExp,
      BExp,
      NonValAExp,
      NonValBExp,
      Stmt,
      Code,
      CompStack,
      Map / "(Array Int Int)",
      CfgI,
      State,
      
      VarF,
      ExpF,
      NonValExpF,
      ValExpF,
      CfgF
    ;

builtins sum : Int Int -> Int, sumUpTo : Int -> Int, muifun : Int Int -> Int, iS1 : Int Int Int Int -> Int, iE1 : Int Int -> Int,
	meven : Int -> Bool;

// after declaring all sorts,
// we must declare all subsort relations
subsort Int < IntP;
subsort IntP < AExp;
subsort Var < NonValAExp;
subsort NonValAExp < AExp;
subsort NonValBExp < BExp;
subsort AExp BExp Stmt < Code;
subsort Bool < BoolP;
subsort BoolP < BExp;
subsort AExp < Stmt;
subsort BExp < Stmt;

subsort Bool < ValExpF;
subsort Int < ValExpF;
subsort VarF < ExpF;
subsort ValExpF < ExpF;
subsort NonValExpF < ExpF;


/* next we must declare all function symbols */
signature
	pair : CfgI CfgF -> State,

	mapequals : Map Map -> Bool / "=",

	vfequals : VarF VarF -> Bool / "=",

	var : Int -> Var,
	fvar : Int -> VarF,

	// functional language
	miu : VarF ExpF -> NonValExpF,
	lam : VarF ExpF -> ValExpF,

	fplus : ExpF ExpF -> NonValExpF,
	fminus : ExpF ExpF -> NonValExpF,
	fle : ExpF ExpF -> NonValExpF,
	fless : ExpF ExpF -> NonValExpF,
	fite : ExpF ExpF ExpF -> NonValExpF,
//	flet : Var ExpF ExpF -> NonValExpF,

	app : ExpF ExpF -> NonValExpF,

	F : ExpF -> CfgF,

	//equality
	iequals : AExp AExp -> NonValBExp,
	iequalshl : AExp -> BExp,
	iequalshr : AExp -> BExp,

	contextexp : ExpF -> ExpF,
//	contextexp : ValExpF -> ValExpF,
//	contextexp : NonValExpF -> NonValExpF,
	
	pS1 : -> Stmt,
	pE1 : -> NonValAExp,

	// arithmetic and boolean expressions
	times : AExp AExp -> NonValAExp,
	timeshl : AExp -> AExp,
    	timeshr : AExp -> AExp,

	// helper functions
	synEq : Var Var -> Bool / "=",

	update : Map Int Int -> Map / "store",
	lookup  : Map Int -> Int / "select",

	// arithmetic and boolean expressions
	plus : AExp AExp -> NonValAExp,
	plushl : AExp -> AExp,
    	plushr : AExp -> AExp,

    // arithmetic and boolean expressions
	div : AExp AExp -> NonValAExp,
	divhl : AExp -> AExp,
    	divhr : AExp -> AExp,

	// uninterpreted function
	uifun : AExp AExp -> NonValAExp,
	uifunhl : AExp -> AExp,
	uifunhr : AExp -> AExp,

	minus : AExp AExp -> NonValAExp,
	minushl : AExp -> AExp,
    	minushr : AExp -> AExp,

	pred : AExp -> NonValAExp,
	predh : -> Stmt,

	fnot : ExpF -> NonValExpF,

	fequals : ExpF ExpF -> NonValExpF,

	succ : AExp -> NonValAExp,
	succh : -> Stmt,

	le   : AExp AExp -> NonValBExp,
    	lehl : AExp -> BExp,
    	lehr : AExp -> BExp,

	less   : AExp AExp -> NonValBExp,
    	lesshl : AExp -> BExp,
    	lesshr : AExp -> BExp,

    fdiv : ExpF ExpF -> NonValExpF,

	not : BExp -> NonValBExp,
	noth : -> Stmt,

	ieven : AExp -> NonValBExp,
	ievenh : -> AExp,
	ftimes : ExpF ExpF -> NonValExpF,
	feven : ExpF -> NonValExpF,

	// computation stack
	done : -> CompStack,
	push : Code CompStack -> CompStack,

	// configuration
	IC : CompStack Map -> CfgI,

	// statements
	assign : Var AExp -> Stmt,
    	assignh : Var -> Stmt,

	skip : -> Stmt,

	seq : Stmt Stmt -> Stmt,

	ite : BExp Stmt Stmt -> Stmt,
	iteh : Stmt Stmt -> Stmt,

	while : BExp Stmt -> Stmt,

	for : Var AExp AExp Stmt -> Stmt,
	forhl : Var AExp Stmt -> Stmt,
	forhr : Var AExp Stmt -> Stmt;

/* next we must declare all variables */
variables
	// necessary variables
	X : Int,
	Y : Int,
	Z : Int,

	N : Int,
	SUM : Int,
	I : Int,
	J : Int,
	M : Int,
	PRIMM : Int,
	PRIMMP : Int,
	PRIMN : Int,
 	PRIMENV : Map,
 	PRIMENVP : Map,
	MP : Int,

	B : Bool,
	BE : BExp,
	BE1 : BExp,
	BE2 : BExp,
	AE : AExp,
	AE1 : AExp,
	AE2 : AExp,
	NVAE : NonValAExp,
	NVAE1 : NonValAExp,
	NVAE2 : NonValAExp,
	NVBE : NonValBExp,
	NVBE1 : NonValBExp,
	NVBE2 : NonValBExp,
	S : Stmt,
	S1 : Stmt,
	S2 : Stmt,
	S3 : Stmt,
	S4 : Stmt,
	REST : CompStack,
	ENV : Map,
	ENVP : Map,
	ENV1 : Map,
	ENV2 : Map,

	FEXP : ExpF,
	FEXP1 : ExpF,
	FEXP2 : ExpF,
	FEXP3 : ExpF,
	FNV : NonValExpF,
	VF : ValExpF;


assert (_forallInt N
         (mequals (sumUpTo N) (mdiv (mtimes N (mplus N 1)) 2)));

assert (_forallInt N
         (mequals (meven N) (mequals (mmod N 2) 0)));

assert (_forallInt X (_forallInt Y
         (mequals (sum X Y) (mminus (sumUpTo Y) (sumUpTo (mminus X 1))))));


define substitute : VarF ExpF ExpF -> ExpF by
  (substitute (fvar X) FEXP I) => I,
  (substitute (fvar X) FEXP B) => B,
  (substitute (fvar X) FEXP (fvar X)) => FEXP,
  (substitute (fvar X) FEXP (fvar Y)) /\ (bnot (mequals X Y)) => (fvar Y),

  (substitute (fvar X) FEXP (fplus FEXP1 FEXP2)) => (fplus (substitute (fvar X) FEXP FEXP1) (substitute (fvar X) FEXP FEXP2)),
  (substitute (fvar X) FEXP (fminus FEXP1 FEXP2)) => (fminus (substitute (fvar X) FEXP FEXP1) (substitute (fvar X) FEXP FEXP2)),
  (substitute (fvar X) FEXP (fless FEXP1 FEXP2)) => (fless (substitute (fvar X) FEXP FEXP1) (substitute (fvar X) FEXP FEXP2)),
  (substitute (fvar X) FEXP (fle FEXP1 FEXP2)) => (fle (substitute (fvar X) FEXP FEXP1) (substitute (fvar X) FEXP FEXP2)),
  (substitute (fvar X) FEXP (fite FEXP1 FEXP2 FEXP3)) => (fite (substitute (fvar X) FEXP FEXP1) (substitute (fvar X) FEXP FEXP2) (substitute (fvar X) FEXP FEXP3)),

  (substitute (fvar X) FEXP (fnot FEXP1)) => (fnot (substitute (fvar X) FEXP FEXP1)),

  (substitute (fvar X) FEXP (ftimes FEXP1 FEXP2)) => (ftimes (substitute (fvar X) FEXP FEXP1) (substitute (fvar X) FEXP FEXP2)),
  (substitute (fvar X) FEXP (feven FEXP1)) => (feven (substitute (fvar X) FEXP FEXP1)),

  (substitute (fvar X) FEXP (fdiv FEXP1 FEXP2)) => (fdiv (substitute (fvar X) FEXP FEXP1) (substitute (fvar X) FEXP FEXP2)),

  (substitute (fvar X) FEXP (fequals FEXP1 FEXP2)) => (fequals (substitute (fvar X) FEXP FEXP1) (substitute (fvar X) FEXP FEXP2)),

  (substitute (fvar X) FEXP (app FEXP1 FEXP2)) => (app (substitute (fvar X) FEXP FEXP1) (substitute (fvar X) FEXP FEXP2)),

  (substitute (fvar X) FEXP1 (lam (fvar X) FEXP)) => (lam (fvar X) FEXP),
  (substitute (fvar X) FEXP1 (lam (fvar Y) FEXP)) /\ (bnot (mequals X Y)) => (lam (fvar Y) (substitute (fvar X) FEXP1 FEXP)),

  (substitute (fvar X) FEXP1 (miu (fvar X) FEXP)) => (miu (fvar X) FEXP),
  (substitute (fvar X) FEXP1 (miu (fvar Y) FEXP)) /\ (bnot (mequals X Y)) => (miu (fvar Y) (substitute (fvar X) FEXP1 FEXP))
  ;
  
  

/* next declare all rewrite rules */
constrained-rewrite-system language
// language
 	(IC (push (var X)              REST) ENV) =>
 	(IC (push (lookup ENV X) REST) ENV),

	(IC (push (pred N)            REST) ENV) =>
	(IC (push (mminus N 1)    REST) ENV),

	(IC (push (pred NVAE)       REST)  ENV) =>
	(IC (push NVAE (push predh REST)) ENV),

	(IC (push N (push predh REST)) ENV) =>
	(IC (push (pred N)       REST)  ENV),

	(IC (push (not B)  REST) ENV) =>
	(IC (push (bnot B) REST) ENV),

	(IC (push (not NVBE)       REST)  ENV) =>
	(IC (push NVBE (push noth REST)) ENV),

	(IC (push B (push noth REST)) ENV) =>
	(IC (push (not B)       REST)  ENV),


	(IC (push (succ N)           REST) ENV) =>
	(IC (push (mplus N 1)    REST) ENV),

	(IC (push (succ NVAE)       REST)  ENV) =>
	(IC (push NVAE (push succh REST)) ENV),

	(IC (push N (push succh REST)) ENV) =>
	(IC (push (succ N)       REST)  ENV),

	(IC (push (assign (var X) N) REST) ENV) =>
        (IC REST       (update ENV X N)),
    
 	(IC (push (assign (var X) NVAE)       REST)  ENV) =>
 	(IC (push NVAE (push (assignh (var X)) REST)) ENV),

     	(IC (push N (push (assignh (var X)) REST)) ENV) =>
     	(IC (push (assign (var X) N)        REST)  ENV),

// sequential composition
	(IC (push (seq S1 S2) REST)  ENV) =>
	(IC (push S1 (push S2 REST)) ENV),

	(IC (push skip REST) ENV) =>
	(IC            REST  ENV),

// conditional statement

	(IC (push (ite NVBE S1 S2)       REST)  ENV) =>
	(IC (push NVBE (push (iteh S1 S2) REST)) ENV),

	(IC (push B (push (iteh S1 S2) REST)) ENV) =>
	(IC (push (ite B S1 S2)       REST)  ENV),

	(IC (push (ite true S1 S2) REST) ENV) =>
	(IC (push S1                REST) ENV),

 	(IC (push (ite false S1 S2) REST) ENV) =>
 	(IC (push S2                 REST) ENV),

	(IC (push (ieven N) REST) ENV) =>
	(IC (push (meven N) REST) ENV),

// equality operator

 	(IC (push (iequals N M)  REST) ENV) =>
 	(IC (push (mequals N M) REST) ENV),

 	(IC (push (iequals NVAE1 AE2)        REST)  ENV) =>
 	(IC (push NVAE1 (push (iequalshl AE2) REST)) ENV),

 	(IC (push N (push (iequalshl AE2) REST)) ENV) =>
 	(IC (push (iequals N AE2)        REST)  ENV),

 	(IC (push (iequals N NVAE2)        REST)  ENV) =>
 	(IC (push NVAE2 (push (iequalshr N) REST)) ENV),
  
 	(IC (push M (push (iequalshr N) REST)) ENV) =>
 	(IC (push (iequals N M)       REST)  ENV),

// multiplication operator
 	(IC (push (times N M)     REST) ENV) =>
 	(IC (push (mtimes N M)    REST) ENV),

	(IC (push (times NVAE1 AE2)        REST)  ENV) =>
	(IC (push NVAE1 (push (timeshl AE2) REST)) ENV),
  
 	(IC (push N (push (timeshl AE2) REST)) ENV) =>
 	(IC (push (times N AE2)        REST)  ENV),

 	(IC (push (times N NVAE2)        REST)  ENV) =>
 	(IC (push NVAE2 (push (timeshr N) REST)) ENV),

 	(IC (push M (push (timeshr N) REST)) ENV) =>
 	(IC (push (times N M)        REST)  ENV),


// division operator
 	(IC (push (div N M)     REST) ENV) =>
 	(IC (push (mdiv N M)    REST) ENV),

	(IC (push (div NVAE1 AE2)        REST)  ENV) =>
	(IC (push NVAE1 (push (divhl AE2) REST)) ENV),
  
 	(IC (push N (push (divhl AE2) REST)) ENV) =>
 	(IC (push (div N AE2)        REST)  ENV),

 	(IC (push (div N NVAE2)        REST)  ENV) =>
 	(IC (push NVAE2 (push (divhr N) REST)) ENV),

 	(IC (push M (push (divhr N) REST)) ENV) =>
 	(IC (push (div N M)        REST)  ENV),


// while statement
 	(IC (push (while BE S)                        REST) ENV) =>
 	(IC (push (ite BE (seq S (while BE S)) skip) REST) ENV),

// addition operator
 	(IC (push (plus N M)     REST) ENV) =>
 	(IC (push (mplus N M)    REST) ENV),

	(IC (push (plus NVAE1 AE2)        REST)  ENV) =>
	(IC (push NVAE1 (push (plushl AE2) REST)) ENV),
  
 	(IC (push N (push (plushl AE2) REST)) ENV) =>
 	(IC (push (plus N AE2)        REST)  ENV),

 	(IC (push (plus N NVAE2)        REST)  ENV) =>
 	(IC (push NVAE2 (push (plushr N) REST)) ENV),

 	(IC (push M (push (plushr N) REST)) ENV) =>
 	(IC (push (plus N M)        REST)  ENV),

// subtraction operator
 	(IC (push (minus N M)     REST) ENV) =>
 	(IC (push (mminus N M)    REST) ENV),

	(IC (push (minus NVAE1 AE2)        REST)  ENV) =>
	(IC (push NVAE1 (push (minushl AE2) REST)) ENV),
  
 	(IC (push N (push (minushl AE2) REST)) ENV) =>
 	(IC (push (minus N AE2)        REST)  ENV),

 	(IC (push (minus N NVAE2)        REST)  ENV) =>
 	(IC (push NVAE2 (push (minushr N) REST)) ENV),

 	(IC (push M (push (minushr N) REST)) ENV) =>
 	(IC (push (minus N M)        REST)  ENV),

// for statement
 	(IC (push (for (var X) NVAE1 NVAE2 S)        REST ) ENV) =>
 	(IC (push NVAE1 (push (forhl (var X) NVAE2 S) REST)) ENV),

 	(IC (push N (push (forhl (var X) NVAE2 S) REST)) ENV) =>
 	(IC (push (for (var X) N NVAE2 S)        REST)  ENV),

 	(IC (push (for (var X) N NVAE2 S)            REST ) ENV) =>
 	(IC (push NVAE2 (push (forhr (var X) N S)     REST)) ENV),

 	(IC (push M (push (forhr (var X) N S) REST)) ENV) =>
 	(IC (push (for (var X) N M S)        REST)  ENV),

	(IC (push (for (var X) N M S)                                         REST) ENV) /\ (mle N M) =>
	(IC (push (seq (assign (var X) N) S) (push (for (var X) (mplus N 1) M S) REST)) ENV),

	(IC (push (for (var X) N M S) REST) ENV) /\ (bnot (mle N M)) =>
	(IC (push (assign (var X) N)  REST) ENV),

// less than or equal to operator2

 	(IC (push (le N M)  REST) ENV) =>
 	(IC (push (mle N M) REST) ENV),

 	(IC (push (le NVAE1 AE2)        REST)  ENV) =>
 	(IC (push NVAE1 (push (lehl AE2) REST)) ENV),

 	(IC (push N (push (lehl AE2) REST)) ENV) =>
 	(IC (push (le N AE2)        REST)  ENV),

 	(IC (push (le N NVAE2)        REST)  ENV) =>
 	(IC (push NVAE2 (push (lehr N) REST)) ENV),
  
 	(IC (push M (push (lehr N) REST)) ENV) =>
 	(IC (push (le N M)       REST)  ENV),

// uninterpreted function
 	(IC (push (uifun N M)     REST) ENV) =>
 	(IC (push (muifun N M)    REST) ENV),

	(IC (push (uifun NVAE1 AE2)        REST)  ENV) =>
	(IC (push NVAE1 (push (uifunhl AE2) REST)) ENV),
  
 	(IC (push N (push (uifunhl AE2) REST)) ENV) =>
 	(IC (push (uifun N AE2)        REST)  ENV),

 	(IC (push (uifun N NVAE2)        REST)  ENV) =>
 	(IC (push NVAE2 (push (uifunhr N) REST)) ENV),

 	(IC (push M (push (uifunhr N) REST)) ENV) =>
 	(IC (push (uifun N M)        REST)  ENV),

// strictly less than

 	(IC (push (less N M)  REST) ENV) =>
 	(IC (push (mless N M) REST) ENV),

 	(IC (push (less NVAE1 AE2)        REST)  ENV) =>
 	(IC (push NVAE1 (push (lesshl AE2) REST)) ENV),

 	(IC (push N (push (lesshl AE2) REST)) ENV) =>
 	(IC (push (less N AE2)        REST)  ENV),

 	(IC (push (less N NVAE2)        REST)  ENV) =>
 	(IC (push NVAE2 (push (lesshr N) REST)) ENV),
  
 	(IC (push M (push (lesshr N) REST)) ENV) =>
 	(IC (push (less N M)       REST)  ENV),

// symbolic variables statements and expressions
    (IC (push pE1 REST) ENV) =>
	(IC (push (iE1 (lookup ENV 4) (lookup ENV 2)) REST) ENV),

	(IC (push pS1 REST) ENV) =>
	(IC REST (update ENV 3 (iS1 (lookup ENV 3) (lookup ENV 4) (lookup ENV 1) (lookup ENV 2))))
;

constrained-rewrite-system flanguage
	(contextexp (fplus FNV FEXP)) => (fplus (contextexp FNV) FEXP),
	(fplus (contextexp I) FEXP) => (contextexp (fplus I FEXP)),
	(contextexp (fplus I FNV)) => (fplus I (contextexp FNV)),
	(fplus I (contextexp J)) => (contextexp (fplus I J)),
	(contextexp (fplus I J)) => (contextexp (mplus I J)),

	(contextexp (fnot FNV)) => (fnot (contextexp FNV)),
	(fnot (contextexp B)) => (contextexp (fnot B)),
	(contextexp (fnot B)) => (contextexp (bnot B)),

	(contextexp (fminus FNV FEXP)) => (fminus (contextexp FNV) FEXP),
	(fminus (contextexp I) FEXP) => (contextexp (fminus I FEXP)),
	(contextexp (fminus I FNV)) => (fminus I (contextexp FNV)),
	(fminus I (contextexp J)) => (contextexp (fminus I J)),
	(contextexp (fminus I J)) => (contextexp (mminus I J)),

	(contextexp (feven FNV)) => (feven (contextexp FNV)),
	(feven (contextexp I)) => (contextexp (feven I)),
	(contextexp (feven I)) => (contextexp (meven I)),
	
	(contextexp (fless FNV FEXP)) => (fless (contextexp FNV) FEXP),
	(fless (contextexp I) FEXP) => (contextexp (fless I FEXP)),
	(contextexp (fless I FNV)) => (fless I (contextexp FNV)),
	(fless I (contextexp J)) => (contextexp (fless I J)),
	(contextexp (fless I J)) => (contextexp (mless I J)),
	
	(contextexp (fle FNV FEXP)) => (fle (contextexp FNV) FEXP),
	(fle (contextexp I) FEXP) => (contextexp (fle I FEXP)),
	(contextexp (fle I FNV)) => (fle I (contextexp FNV)),
	(fle I (contextexp J)) => (contextexp (fle I J)),
	(contextexp (fle I J)) => (contextexp (mle I J)),

	(contextexp (ftimes FNV FEXP)) => (ftimes (contextexp FNV) FEXP),
	(ftimes (contextexp I) FEXP) => (contextexp (ftimes I FEXP)),
	(contextexp (ftimes I FNV)) => (ftimes I (contextexp FNV)),
	(ftimes I (contextexp J)) => (contextexp (ftimes I J)),
	(contextexp (ftimes I J)) => (contextexp (mtimes I J)),


	(contextexp (fite FNV FEXP1 FEXP2)) => (fite (contextexp FNV) FEXP1 FEXP2),
	(fite (contextexp B) FEXP1 FEXP2) => (contextexp (fite B FEXP1 FEXP2)),
	(contextexp (fite true FEXP1 FEXP2)) => (contextexp FEXP1),
	(contextexp (fite false FEXP1 FEXP2)) => (contextexp FEXP2),

	(contextexp (fequals FNV FEXP)) => (fequals (contextexp FNV) FEXP),
	(fequals (contextexp I) FEXP) => (contextexp (fequals I FEXP)),
	(contextexp (fequals I FNV)) => (fequals I (contextexp FNV)),
	(fequals I (contextexp J)) => (contextexp (fequals I J)),
	(contextexp (fequals I J)) => (contextexp (mequals I J)),

	(contextexp (app FNV FEXP)) => (app (contextexp FNV) FEXP),
	(app (contextexp (lam (fvar X) FEXP1)) FEXP2) => (contextexp (app (lam (fvar X) FEXP1) FEXP2)),
	(contextexp (app (lam (fvar X) FEXP1) FNV)) => (app (lam (fvar X) FEXP1) (contextexp FNV)),
	(app (lam (fvar X) FEXP1) (contextexp VF)) => (contextexp (app (lam (fvar X) FEXP1) VF)),
	(contextexp (app (lam (fvar X) FEXP1) VF)) => (contextexp (substitute (fvar X) VF FEXP1)),

	(contextexp (fdiv FNV FEXP)) => (fdiv (contextexp FNV) FEXP),
	(fdiv (contextexp I) FEXP) => (contextexp (fdiv I FEXP)),
	(contextexp (fdiv I FNV)) => (fdiv I (contextexp FNV)),
	(fdiv I (contextexp J)) => (contextexp (fdiv I J)),
	(contextexp (fdiv I J)) => (contextexp (mdiv I J)),

	
	(contextexp (miu (fvar X) FEXP)) => (contextexp (substitute (fvar X) (miu (fvar X) FEXP) FEXP))
;

show-simulation [100] in language and flanguage :

(pair 

(IC (push (while (not (iequals (var 0) 1)) 
              (seq (assign (var 1) (plus (var 1) 1)) 
	          (ite (ieven (var 0)) (assign (var 0) (div (var 0) 2)) 
		                (assign (var 0) (plus (times (var 0) 3) 1))))) 
	done) ENV)

(F (contextexp 
   (fite (fnot (fequals N 1)) 
        (fite (feven N) 
	     (app (app 

(miu (fvar 2) (lam (fvar 0) (lam (fvar 1) 
   (fite (fnot (fequals (fvar 0) 1)) 
        (fite (feven (fvar 0)) 
	     (app (app (fvar 2) (fdiv (fvar 0) 2)) (fplus (fvar 1) 1)) 
	     (app (app (fvar 2) (fplus (ftimes (fvar 0) 3) 1)) (fplus (fvar 1) 1))) 
	(fvar 1))))) 
             (fdiv N 2)) (fplus I 1)) 
	     
	     (app (app 
(miu (fvar 2) (lam (fvar 0) (lam (fvar 1) 
   (fite (fnot (fequals (fvar 0) 1)) 
        (fite (feven (fvar 0)) 
	     (app (app (fvar 2) (fdiv (fvar 0) 2)) (fplus (fvar 1) 1)) 
	     (app (app (fvar 2) (fplus (ftimes (fvar 0) 3) 1)) (fplus (fvar 1) 1))) 
	(fvar 1))))) 
	
	     (fplus (ftimes N 3) 1)) (fplus I 1))) 
	I))))
	                    
/\ (band (mequals (lookup ENV 0) N)
        (mequals (lookup ENV 1) I))

with-base

(pair (IC done ENV) (F (contextexp N))) /\ (mequals (lookup ENV 1) N);
