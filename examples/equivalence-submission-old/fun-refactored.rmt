/*
*/

sorts
      Var,
      Code,
      Stack,
      Map / "(Array Int Int)",
      Cfg,
      State,
      Exp,
      NonValExp,
      ValExp
    ;

subsort Bool < ValExp;
subsort Int < ValExp;
subsort Var < NonValExp;
subsort ValExp < Exp;
subsort NonValExp < Exp;

signature
  
  P : Exp Map -> Cfg,
  pair : Cfg Cfg -> State,

  var : Int -> Var,
  update : Map Int Int -> Map / "store",
  lookup  : Map Int -> Int / "select",

  done : -> Stack,
  push : Exp Stack -> Stack,

  plus : Exp Exp -> NonValExp,
  plushl : Exp -> NonValExp,
  plushr : Exp -> NonValExp,
  times : Exp Exp -> NonValExp,
  timeshl : Exp -> NonValExp,
  timeshr : Exp -> NonValExp,
  minus : Exp Exp -> NonValExp,
  minushl : Exp -> NonValExp,
  minushr : Exp -> NonValExp,
  le : Exp Exp -> NonValExp,
  lehl : Exp -> NonValExp,
  lehr : Exp -> NonValExp,
  less : Exp Exp -> NonValExp,
  lesshl : Exp -> NonValExp,
  lesshr : Exp -> NonValExp,
  ite : Exp Exp Exp -> NonValExp,
  iteh : Exp Exp -> NonValExp,
  not : Exp -> NonValExp,
  noth : -> NonValExp,

  assign : Var Exp -> NonValExp,
  assignh : Var -> NonValExp,
  while : Exp Exp -> NonValExp,
  skip : -> NonValExp,
  seq : Exp Exp -> NonValExp,
  seqh : Exp -> NonValExp,

  app : Exp Exp -> NonValExp,
  apphl : Exp -> NonValExp,
  apphr : Exp -> NonValExp,
  miu : Var Exp -> NonValExp,
  lam : Var Exp -> ValExp
;

variables
  X : Int,
  Y : Int,
  Z : Int,
  I : Int,
  J : Int,

  B : Bool,

  REST : Stack,
  ENV : Map,
  ENV1 : Map,
  ENV2 : Map,
  ENV3 : Map,

  EXP : Exp,
  EXP1 : Exp,
  EXP2 : Exp,
  EXP3 : Exp,
  FNV : NonValExp,
  VF : ValExp;

/*
define eqId : Id Id -> Bool by
  eqId x x = true,
  eqId y y = true,
  eqId z z = true,
  eqId x y = false,
  eqId x z = false,
   ...
*/

define substitute : Var Exp Exp -> Exp by
  (substitute (var X) EXP I) => I,
  (substitute (var X) EXP B) => B,
  (substitute (var X) EXP (var X)) => EXP,
  (substitute (var X) EXP (var Y)) /\ (bnot (mequals X Y)) => (var Y),

  (substitute (var X) EXP (plus EXP1 EXP2)) => (plus (substitute (var X) EXP EXP1) (substitute (var X) EXP EXP2)),
  (substitute (var X) EXP (times EXP1 EXP2)) => (times (substitute (var X) EXP EXP1) (substitute (var X) EXP EXP2)),
  (substitute (var X) EXP (minus EXP1 EXP2)) => (minus (substitute (var X) EXP EXP1) (substitute (var X) EXP EXP2)),
  (substitute (var X) EXP (less EXP1 EXP2)) => (less (substitute (var X) EXP EXP1) (substitute (var X) EXP EXP2)),
  (substitute (var X) EXP (le EXP1 EXP2)) => (le (substitute (var X) EXP EXP1) (substitute (var X) EXP EXP2)),
  (substitute (var X) EXP (not EXP1)) => (not (substitute (var X) EXP EXP1)),
  (substitute (var X) EXP (ite EXP1 EXP2 EXP3)) => (ite (substitute (var X) EXP EXP1) (substitute (var X) EXP EXP2) (substitute (var X) EXP EXP3)),

  (substitute (var X) EXP (assign (var Y) EXP1)) => (assign (var Y) (substitute (var X) EXP EXP1)),
  (substitute (var X) EXP (while EXP1 EXP2)) => (while (substitute (var X) EXP EXP1) (substitute (var X) EXP EXP2)),
  (substitute (var X) EXP (seq EXP1 EXP2)) => (seq (substitute (var X) EXP EXP1) (substitute (var X) EXP EXP2)),

  (substitute (var X) EXP (app EXP1 EXP2)) => (app (substitute (var X) EXP EXP1) (substitute (var X) EXP EXP2)),

  (substitute (var X) EXP1 (lam (var X) EXP)) => (lam (var X) EXP),
  (substitute (var X) EXP1 (lam (var Y) EXP)) /\ (bnot (mequals X Y)) => (lam (var Y) (substitute (var X) EXP1 EXP)),

  (substitute (var X) EXP1 (miu (var X) EXP)) => (miu (var X) EXP),
  (substitute (var X) EXP1 (miu (var Y) EXP)) /\ (bnot (mequals X Y)) => (miu (var Y) (substitute (var X) EXP1 EXP))
  ;  


constrained-rewrite-system language

  (P (push (var X) REST) ENV) => (P (push (lookup ENV X) REST) ENV),

  (P (push (plus FNV EXP) REST) ENV) => (P (push FNV (push (plushl EXP) REST)) ENV),
  (P (push I (push (plushl EXP) REST)) ENV) => (P (push (plus I EXP) REST) ENV),
  (P (push (plus I FNV) REST) ENV) => (P (push FNV (push (plushr I) REST)) ENV),
  (P (push J (push (plushr I) REST)) ENV) => (P (push (plus I J) REST) ENV),
  (P (push (plus I J) REST) ENV) => (P (push (mplus I J) REST) ENV),

  (P (push (times FNV EXP) REST) ENV) => (P (push FNV (push (timeshl EXP) REST)) ENV),
  (P (push I (push (timeshl EXP) REST)) ENV) => (P (push (times I EXP) REST) ENV),
  (P (push (times I FNV) REST) ENV) => (P (push FNV (push (timeshr I) REST)) ENV),
  (P (push J (push (timeshr I) REST)) ENV) => (P (push (times I J) REST) ENV),
  (P (push (times I J) REST) ENV) => (P (push (mtimes I J) REST) ENV),

  (P (push (minus FNV EXP) REST) ENV) => (P (push FNV (push (minushl EXP) REST)) ENV),
  (P (push I (push (minushl EXP) REST)) ENV) => (P (push (minus I EXP) REST) ENV),
  (P (push (minus I FNV) REST) ENV) => (P (push FNV (push (minushr I) REST)) ENV),
  (P (push J (push (minushr I) REST)) ENV) => (P (push (minus I J) REST) ENV),
  (P (push (minus I J) REST) ENV) => (P (push (mminus I J) REST) ENV),

  (P (push (less FNV EXP) REST) ENV) => (P (push FNV (push (lesshl EXP) REST)) ENV),
  (P (push I (push (lesshl EXP) REST)) ENV) => (P (push (less I EXP) REST) ENV),
  (P (push (less I FNV) REST) ENV) => (P (push FNV (push (lesshr I) REST)) ENV),
  (P (push J (push (lesshr I) REST)) ENV) => (P (push (less I J) REST) ENV),
  (P (push (less I J) REST) ENV) => (P (push (mless I J) REST) ENV),

  (P (push (le FNV EXP) REST) ENV) => (P (push FNV (push (lehl EXP) REST)) ENV),
  (P (push I (push (lehl EXP) REST)) ENV) => (P (push (le I EXP) REST) ENV),
  (P (push (le I FNV) REST) ENV) => (P (push FNV (push (lehr I) REST)) ENV),
  (P (push J (push (lehr I) REST)) ENV) => (P (push (le I J) REST) ENV),
  (P (push (le I J) REST) ENV) => (P (push (mle I J) REST) ENV),

  (P (push (not B) REST) ENV) => (P (push (bnot B) REST) ENV),
  (P (push (not FNV) REST) ENV) => (P (push FNV (push noth REST)) ENV),
  (P (push B (push noth REST)) ENV) => (P (push (not B) REST) ENV),

  (P (push (ite FNV EXP1 EXP2) REST) ENV) => (P (push FNV (push (iteh EXP1 EXP2) REST)) ENV),
  (P (push B (push (iteh EXP1 EXP2) REST)) ENV) => (P (push (ite B EXP1 EXP2) REST) ENV),
  (P (push (ite true EXP1 EXP2) REST) ENV) => (P (push EXP1 REST) ENV),
  (P (push (ite false EXP1 EXP2) REST) ENV) => (P (push EXP2 REST) ENV),

  (P (push (assign (var X) I) REST) ENV) => (P (push I REST) (update ENV X I)),
  (P (push (assign (var X) FNV) REST) ENV) => (P (push FNV (push (assignh (var X)) REST)) ENV),
  (P (push I (push (assignh (var X)) REST)) ENV) => (P (push (assign (var X) I) REST) ENV),

  (P (push (seq VF EXP2) REST) ENV) => (P (push EXP2 REST) ENV),
  (P (push (seq FNV EXP2) REST) ENV) => (P (push FNV (push (seqh EXP2) REST)) ENV),
  (P (push VF (push (seqh EXP2) REST)) ENV) => (P (push (seq I EXP2) REST) ENV),

  (P (push (while EXP1 EXP2) REST) ENV) => (P (push (ite EXP1 (seq EXP2 (while EXP1 EXP2)) skip) REST) ENV),
  (P (push skip REST) ENV) => (P (push 0 REST) ENV),

  (P (push (app FNV EXP) REST) ENV) => (P (push FNV (push (apphl EXP) REST)) ENV),
  (P (push (lam (var X) EXP1) (push (apphl EXP) REST)) ENV) => (P (push (app (lam (var X) EXP1) EXP) REST) ENV),
  (P (push (app (lam (var X) EXP1) FNV) REST) ENV) => (P (push FNV (push (apphr (lam (var X) EXP1)) REST)) ENV),
  (P (push VF (push (apphr (lam (var X) EXP1)) REST)) ENV) => (P (push (app (lam (var X) EXP1) VF) REST) ENV),
  (P (push (app (lam (var X) EXP1) VF) REST) ENV) => (P (push (substitute (var X) VF EXP1) REST) ENV),

  (P (push (miu (var X) EXP) REST) ENV) => (P (push (substitute (var X) (miu (var X) EXP) EXP) REST) ENV)
;

rundefined in language :

(P (push 
  (seq (assign (var 6) 0) (seq
    (assign (var 5)
    (app
      (miu (var 1)
        (lam (var 0)
        (ite (le 0 (var 0))
          (plus (var 0)
            (app (var 1) (minus (var 0) 1)))
          0
          )))
      3))
    (while (le 0 (var 5)) (seq
      (assign (var 6) (plus (var 6) (var 5)))
      (assign (var 5) (minus (var 5) 1))
      ))
  ))
 done) ENV)
;

!EOF!
