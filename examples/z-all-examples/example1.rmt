/*
This is the running example in the RMT paper submission.

It contains a rewrite system that computes the sub of the first
N positive natural numbers.

Run this example with

./main -v 0 < example1.rmt

The output should be:

2 solutions.
Solution #1:
loop(mplus(S,N),mminus(N,mone)) if mle(mone,N)
Solution #2:
done(S) if bnot(mle(mone,N))
*/

/*
Any RMT file starts with the declaration of sorts.
*/
sorts State;

/*
The next declarations are subsorting declarations. There is no need
for subsorting in this first example, so all declarations are commented
out.
*/
// subsort Int < State;

/*
The next declaration introduces all functional symbols.

The following function symbols are not built-in and therefore they are
uninterpreted. "init", "loop" and "done" are therefore the only
constructors for the sort "State".
*/
signature
  init : Int->State, loop : Int Int->State, done : Int->State;

/*
Up next, we have to declare all variables that we use throughout the
rest of the file.
*/
variables B : Bool, S : Int, N : Int, I : Int;

/*
Now follows the most important part of the file, the declaration of a
constrained term rewriting system (CTRS) called "sum". There are three
constrained rewrite rules. The idea of the "sum" CTRS is to compute
the sum of the first N natural numbers as follows: the term init(N) is
meant to be the initial term of the computation. It immediately
rewrites into loop(mzero, N). Recall from the declarations above that
mzero is a nullary function symbol that is interpreted as the integer
"0". The loop symbol has arity 2 and its two parameters are: (1) an
accumulator holding the sum so far and (2) a counter N - the numbers
it still has to add to the accumulator.

The second rewrite rule corresponds to the case where the computation
is not yet done: the number N is greater than 1 (denoted by the
condition "/\ mle(mone, N)" -- where mle is interpreted as
less-or-equal). In this case the accumulator is increased by N and the
counter decreases by one.

The third rewrite rule corresponds to the termination condition. In
case the counter is less than 1, the term is rewritten into done(S),
where S is the sum accumulated so far.
*/
constrained-rewrite-system sum

  (init N) => (loop 0 N),

  (loop S N) /\ (mle 1 N) => (loop (mplus S N) (mminus N 1)),

  (loop S N) /\ (bnot (mle 1 N)) => (done S);

/*
Finally, this example illustrates the "search" query/command. The
search command will output all symbolic successors of the queried
term. In our case, there are two solutions, depending on whether N is
greater than one or not:

2 solutions.
Solution #1:
loop(mplus(S,N),mminus(N,mone)) if mle(mone,N)
Solution #2:
done(S) if bnot(mle(mone,N))

The solutions are presented as constrained terms "t if b" and they
should be interpreted as follows: if the constraint "b" holds then the
queried term advances in one step into t.

For example, looking at the second solution above, it states that if 1
is not less-or-equal to N, then done(S) is reachable from loop(S, N)
in one step. This corresponds to the application of the third rewrite
rule in the "sum" CTRS defined above.
*/
search in sum : (loop S N);
