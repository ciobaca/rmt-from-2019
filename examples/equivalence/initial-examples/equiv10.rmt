smt-prelude
"(declare-fun uifun (Int Int) Int)
 (declare-datatypes () ((Var varX varY varZ varC1 varC2 varV1 varV2)))
 (declare-datatypes () ((VarF fvarX fvarY fvarZ fvarF)))
 (define-fun sumUpTo ((n Int)) Int
    (div (* n (+ n 1)) 2)
 )
 (define-fun even ((n Int)) Bool
    (= (mod n 2) 0)
 )
 (define-fun sum ((a Int) (b Int)) Int
   (- (sumUpTo b) (sumUpTo (- a 1))))
"

sorts IntP,
      BoolP,
      Var / "Var",
      AExp,
      BExp,
      NonValAExp,
      NonValBExp,
      Stmt,
      Code,
      CompStack,
      Map / "(Array Var Int)",
      CfgI,
      State,
      
      VarF / "VarF",
      ExpF,
      NonValExpF,
      ValExpF,
      ListF,
      CfgF
    ;

// after declaring all sorts,
// we must declare all subsort relations
subsort Int < IntP;
subsort IntP < AExp;
subsort Var < NonValAExp;
subsort NonValAExp < AExp;
subsort NonValBExp < BExp;
subsort AExp BExp Stmt < Code;
subsort Bool < BoolP;
subsort BoolP < BExp;
subsort AExp < Stmt;
subsort BExp < Stmt;

subsort Bool < ValExpF;
subsort Int < ValExpF;
subsort Var < NonValExpF;
subsort VarF < ExpF;
subsort ValExpF < ExpF;
subsort ListF < ValExpF;
subsort NonValExpF < ExpF;


/* next we must declare all function symbols */
signature
	pair : CfgF CfgF -> State,

	sum : Int Int -> Int / "sum",

	mapequals : Map Map -> Bool / "=",

	vfequals : VarF VarF -> Bool / "=",

	meven : Int -> Bool / "even",
	
	// functional language
	miu : VarF ExpF -> NonValExpF,
	lam : VarF ExpF -> ValExpF,

	feven : ExpF -> NonValExpF,
	fnot : ExpF -> NonValExpF,
	fequals : ExpF ExpF -> NonValExpF,
	fdiv : ExpF ExpF -> NonValExpF,
	ftimes : ExpF ExpF -> NonValExpF,

	fplus : ExpF ExpF -> NonValExpF,
	fminus : ExpF ExpF -> NonValExpF,
	fle : ExpF ExpF -> NonValExpF,
	fless : ExpF ExpF -> NonValExpF,
	fite : ExpF ExpF ExpF -> NonValExpF,
//	flet : Var ExpF ExpF -> NonValExpF,

	app : ExpF ExpF -> NonValExpF,

	fassign : Var ExpF -> NonValExpF,
	fcons : ExpF ListF -> ListF,
	fnull : -> ListF,
	fmap : ValExpF ListF -> NonValExpF,
	ftake : Int ListF -> NonValExpF,

	F : ExpF -> CfgF,

	contextexp : ValExpF Map -> ValExpF,
	contextexp : NonValExpF Map -> NonValExpF,

	fvarX : -> VarF / "fvarX",
	fvarY : -> VarF / "fvarY",
	fvarZ : -> VarF / "fvarZ",
	fvarF : -> VarF / "fvarF",
	substitute : VarF ExpF ExpF -> ExpF / defined,

	// some program variables
	x : -> Var / "varX",
	y : -> Var / "varY",
	z : -> Var / "varZ",

	pV1 : -> Var / "varV1",
	pV2 : -> Var / "varV2",
	pC1 : -> Var / "varC1",
	pC2 : -> Var / "varC2",
	
	pS1 : -> Stmt,
	pE1 : -> NonValAExp,
	iS1 : Int Int Int Int -> Int / "iS1",
	iE1 : Int Int -> Int / "iE1",

	// helper functions
	synEq : Var Var -> Bool / "=",

	update : Map Var Int -> Map / "store",
	lookup  : Map Var -> IntP / "select",
	flookup : Map Var -> Int / "select",

	// arithmetic and boolean expressions
	plus : AExp AExp -> NonValAExp,
	plushl : AExp -> AExp,
    	plushr : AExp -> AExp,

	// uninterpreted function Z3
	muifun : Int Int -> Int / "uifun",

	// uninterpreted function
	uifun : AExp AExp -> NonValAExp,
	uifunhl : AExp -> AExp,
	uifunhr : AExp -> AExp,

	minus : AExp AExp -> NonValAExp,
	minushl : AExp -> AExp,
    	minushr : AExp -> AExp,

	pred : AExp -> NonValAExp,
	predh : -> Stmt,

	succ : AExp -> NonValAExp,
	succh : -> Stmt,

	le   : AExp AExp -> NonValBExp,
    	lehl : AExp -> BExp,
    	lehr : AExp -> BExp,

	less   : AExp AExp -> NonValBExp,
    	lesshl : AExp -> BExp,
    	lesshr : AExp -> BExp,

	not : BExp -> NonValBExp,
	noth : -> Stmt,

	iequals : AExp AExp -> NonValBExp,
	iequalshl : AExp -> BExp,
	iequalshr : AExp -> BExp,

	ieven : AExp -> NonValBExp,
	ievenh : -> AExp,

	// computation stack
	done : -> CompStack,
	push : Code CompStack -> CompStack,

	// configuration
	IC : CompStack Map -> CfgI,

	// arithmetic and boolean expressions
	times : AExp AExp -> NonValAExp,
	timeshl : AExp -> AExp,
    	timeshr : AExp -> AExp,

	// arithmetic and boolean expressions
	div : AExp AExp -> NonValAExp,
	divhl : AExp -> AExp,
    	divhr : AExp -> AExp,

	// statements
	assign : Var AExp -> Stmt,
    	assignh : Var -> Stmt,

	skip : -> Stmt,

	seq : Stmt Stmt -> Stmt,

	ite : BExp Stmt Stmt -> Stmt,
	iteh : Stmt Stmt -> Stmt,

	while : BExp Stmt -> Stmt,

	for : Var AExp AExp Stmt -> Stmt,
	forhl : Var AExp Stmt -> Stmt,
	forhr : Var AExp Stmt -> Stmt;

/* next we must declare all variables */
variables
	// necessary variables
	X : Var,
	Y : Var,
	Z : Var,

	N : Int,
	SUM : Int,
	I : Int,
	J : Int,
	M : Int,
	PRIMM : Int,
	PRIMMP : Int,
	PRIMN : Int,
 	PRIMENV : Map,
 	PRIMENVP : Map,
	MP : Int,

	B : Bool,
	BE : BExp,
	BE1 : BExp,
	BE2 : BExp,
	AE : AExp,
	AE1 : AExp,
	AE2 : AExp,
	NVAE : NonValAExp,
	NVAE1 : NonValAExp,
	NVAE2 : NonValAExp,
	NVBE : NonValBExp,
	NVBE1 : NonValBExp,
	NVBE2 : NonValBExp,
	S : Stmt,
	S1 : Stmt,
	S2 : Stmt,
	S3 : Stmt,
	S4 : Stmt,
	REST : CompStack,
	ENV : Map,
	ENVP : Map,
	ENV1 : Map,
	ENV2 : Map,

	XF : VarF,
	FEXP : ExpF,
	FEXP1 : ExpF,
	FEXP2 : ExpF,
	FEXP3 : ExpF,
	FNV : NonValExpF,
	RESTF : ListF,
	VLF : ListF,
	VF : ValExpF;

rewrite-system functions
  (substitute XF FEXP I) => I,
  (substitute XF FEXP B) => B,
  (substitute XF FEXP XF) => FEXP,
  (substitute fvarX FEXP fvarY) => fvarY,
  (substitute fvarX FEXP fvarZ) => fvarZ,
  (substitute fvarX FEXP fvarF) => fvarF,

  (substitute fvarY FEXP fvarX) => fvarX,
  (substitute fvarY FEXP fvarZ) => fvarZ,
  (substitute fvarY FEXP fvarF) => fvarF,

  (substitute fvarZ FEXP fvarY) => fvarY,
  (substitute fvarZ FEXP fvarZ) => fvarZ,
  (substitute fvarZ FEXP fvarF) => fvarF,
  
  (substitute fvarF FEXP fvarX) => fvarX,
  (substitute fvarF FEXP fvarY) => fvarY,
  (substitute fvarF FEXP fvarZ) => fvarZ,
  
  (substitute XF FEXP (feven FEXP1)) => (feven (substitute XF FEXP FEXP1)),
  (substitute XF FEXP (fnot FEXP1)) => (fnot (substitute XF FEXP FEXP1)),
  (substitute XF FEXP (fequals FEXP1 FEXP2)) => (fequals (substitute XF FEXP FEXP1) (substitute XF FEXP FEXP2)),
  (substitute XF FEXP (ftimes FEXP1 FEXP2)) => (ftimes (substitute XF FEXP FEXP1) (substitute XF FEXP FEXP2)),
  (substitute XF FEXP (fdiv FEXP1 FEXP2)) => (fdiv (substitute XF FEXP FEXP1) (substitute XF FEXP FEXP2)),
(substitute XF FEXP (fplus FEXP1 FEXP2)) => (fplus (substitute XF FEXP FEXP1) (substitute XF FEXP FEXP2)),
  (substitute XF FEXP (fminus FEXP1 FEXP2)) => (fminus (substitute XF FEXP FEXP1) (substitute XF FEXP FEXP2)),
  (substitute XF FEXP (fless FEXP1 FEXP2)) => (fless (substitute XF FEXP FEXP1) (substitute XF FEXP FEXP2)),
  (substitute XF FEXP (fle FEXP1 FEXP2)) => (fle (substitute XF FEXP FEXP1) (substitute XF FEXP FEXP2)),
  (substitute XF FEXP (fite FEXP1 FEXP2 FEXP3)) => (fite (substitute XF FEXP FEXP1) (substitute XF FEXP FEXP2) (substitute XF FEXP FEXP3)),

  (substitute XF FEXP (app FEXP1 FEXP2)) => (app (substitute XF FEXP FEXP1) (substitute XF FEXP FEXP2)),

  (substitute fvarX FEXP1 (lam fvarY FEXP)) => (lam fvarY (substitute fvarX FEXP1 FEXP)),
  (substitute fvarX FEXP1 (lam fvarZ FEXP)) => (lam fvarZ (substitute fvarX FEXP1 FEXP)),
  (substitute fvarX FEXP1 (lam fvarF FEXP)) => (lam fvarF (substitute fvarX FEXP1 FEXP)),

  (substitute fvarY FEXP1 (lam fvarX FEXP)) => (lam fvarX (substitute fvarY FEXP1 FEXP)),
  (substitute fvarY FEXP1 (lam fvarZ FEXP)) => (lam fvarZ (substitute fvarY FEXP1 FEXP)),
  (substitute fvarY FEXP1 (lam fvarF FEXP)) => (lam fvarF (substitute fvarY FEXP1 FEXP)),

  (substitute fvarZ FEXP1 (lam fvarX FEXP)) => (lam fvarX (substitute fvarZ FEXP1 FEXP)),
  (substitute fvarZ FEXP1 (lam fvarY FEXP)) => (lam fvarY (substitute fvarZ FEXP1 FEXP)),
  (substitute fvarZ FEXP1 (lam fvarF FEXP)) => (lam fvarF (substitute fvarZ FEXP1 FEXP)),

  (substitute fvarF FEXP1 (lam fvarX FEXP)) => (lam fvarX (substitute fvarF FEXP1 FEXP)),
  (substitute fvarF FEXP1 (lam fvarY FEXP)) => (lam fvarY (substitute fvarF FEXP1 FEXP)),
  (substitute fvarF FEXP1 (lam fvarZ FEXP)) => (lam fvarZ (substitute fvarF FEXP1 FEXP)),

  (substitute fvarF FEXP1 (fassign X FEXP)) => (fassign X (substitute fvarF FEXP1 FEXP)),
  (substitute fvarX FEXP1 (fassign X FEXP)) => (fassign X (substitute fvarX FEXP1 FEXP)),
  (substitute fvarY FEXP1 (fassign X FEXP)) => (fassign X (substitute fvarY FEXP1 FEXP)),

  (substitute XF FEXP1 (lam XF FEXP)) => (lam XF FEXP),

  (substitute fvarX FEXP1 (miu fvarY FEXP)) => (miu fvarY (substitute fvarX FEXP1 FEXP)),
  (substitute fvarX FEXP1 (miu fvarZ FEXP)) => (miu fvarZ (substitute fvarX FEXP1 FEXP)),
  (substitute fvarX FEXP1 (miu fvarF FEXP)) => (miu fvarF (substitute fvarX FEXP1 FEXP)),
  
  (substitute fvarY FEXP1 (miu fvarX FEXP)) => (miu fvarX (substitute fvarY FEXP1 FEXP)),
  (substitute fvarY FEXP1 (miu fvarZ FEXP)) => (miu fvarZ (substitute fvarY FEXP1 FEXP)),
  (substitute fvarY FEXP1 (miu fvarF FEXP)) => (miu fvarF (substitute fvarY FEXP1 FEXP)),
  
  (substitute fvarZ FEXP1 (miu fvarX FEXP)) => (miu fvarX (substitute fvarZ FEXP1 FEXP)),
  (substitute fvarZ FEXP1 (miu fvarY FEXP)) => (miu fvarY (substitute fvarZ FEXP1 FEXP)),
  (substitute fvarZ FEXP1 (miu fvarF FEXP)) => (miu fvarF (substitute fvarZ FEXP1 FEXP)),

  (substitute fvarF FEXP1 (miu fvarX FEXP)) => (miu fvarX (substitute fvarF FEXP1 FEXP)),
  (substitute fvarF FEXP1 (miu fvarY FEXP)) => (miu fvarY (substitute fvarF FEXP1 FEXP)),
  (substitute fvarF FEXP1 (miu fvarZ FEXP)) => (miu fvarZ (substitute fvarF FEXP1 FEXP)),
  
  (substitute XF FEXP1 (miu XF FEXP)) => (miu XF FEXP);

/* next declare all rewrite rules */
constrained-rewrite-system language
// language
 	(IC (push X              REST) ENV) =>
 	(IC (push (lookup ENV X) REST) ENV),

	(IC (push (pred N)            REST) ENV) =>
	(IC (push (mminus N 1)    REST) ENV),

	(IC (push (pred NVAE)       REST)  ENV) =>
	(IC (push NVAE (push predh REST)) ENV),

	(IC (push N (push predh REST)) ENV) =>
	(IC (push (pred N)       REST)  ENV),

	(IC (push (not B)  REST) ENV) =>
	(IC (push (bnot B) REST) ENV),

	(IC (push (not NVBE)       REST)  ENV) =>
	(IC (push NVBE (push noth REST)) ENV),

	(IC (push B (push noth REST)) ENV) =>
	(IC (push (not B)       REST)  ENV),


	(IC (push (succ N)           REST) ENV) =>
	(IC (push (mplus N 1)    REST) ENV),

	(IC (push (succ NVAE)       REST)  ENV) =>
	(IC (push NVAE (push succh REST)) ENV),

	(IC (push N (push succh REST)) ENV) =>
	(IC (push (succ N)       REST)  ENV),

// 
	(IC (push (assign X N) REST) ENV) =>
        (IC REST       (update ENV X N)),
    
 	(IC (push (assign X NVAE)       REST)  ENV) =>
 	(IC (push NVAE (push (assignh X) REST)) ENV),

     	(IC (push N (push (assignh X) REST)) ENV) =>
     	(IC (push (assign X N)        REST)  ENV),

// sequential composition
	(IC (push (seq S1 S2) REST)  ENV) =>
	(IC (push S1 (push S2 REST)) ENV),

	(IC (push skip REST) ENV) =>
	(IC            REST  ENV),

// conditional statement

	(IC (push (ite NVBE S1 S2)       REST)  ENV) =>
	(IC (push NVBE (push (iteh S1 S2) REST)) ENV),

	(IC (push B (push (iteh S1 S2) REST)) ENV) =>
	(IC (push (ite B S1 S2)       REST)  ENV),

	(IC (push (ite true S1 S2) REST) ENV) =>
	(IC (push S1                REST) ENV),

 	(IC (push (ite false S1 S2) REST) ENV) =>
 	(IC (push S2                 REST) ENV),

// while statement
 	(IC (push (while BE S)                        REST) ENV) =>
 	(IC (push (ite BE (seq S (while BE S)) skip) REST) ENV),

// addition operator
 	(IC (push (plus N M)     REST) ENV) =>
 	(IC (push (mplus N M)    REST) ENV),

	(IC (push (plus NVAE1 AE2)        REST)  ENV) =>
	(IC (push NVAE1 (push (plushl AE2) REST)) ENV),
  
 	(IC (push N (push (plushl AE2) REST)) ENV) =>
 	(IC (push (plus N AE2)        REST)  ENV),

 	(IC (push (plus N NVAE2)        REST)  ENV) =>
 	(IC (push NVAE2 (push (plushr N) REST)) ENV),

 	(IC (push M (push (plushr N) REST)) ENV) =>
 	(IC (push (plus N M)        REST)  ENV),

// even
	(IC (push (ieven N) REST) ENV) =>
	(IC (push (meven N) REST) ENV),

	(IC (push (ieven NVAE)       REST)  ENV) =>
	(IC (push NVAE (push ievenh REST)) ENV),

	(IC (push N (push ievenh REST)) ENV) =>
	(IC (push (ieven N)       REST)  ENV),


// equality
 	(IC (push (iequals N M)  REST) ENV) =>
 	(IC (push (mequals N M) REST) ENV),

 	(IC (push (iequals NVAE1 AE2)        REST)  ENV) =>
 	(IC (push NVAE1 (push (iequalshl AE2) REST)) ENV),

 	(IC (push N (push (iequalshl AE2) REST)) ENV) =>
 	(IC (push (iequals N AE2)        REST)  ENV),

 	(IC (push (iequals N NVAE2)        REST)  ENV) =>
 	(IC (push NVAE2 (push (iequalshr N) REST)) ENV),
  
 	(IC (push M (push (iequalshr N) REST)) ENV) =>
 	(IC (push (iequals N M)       REST)  ENV),

// uninterpreted function
 	(IC (push (uifun N M)     REST) ENV) =>
 	(IC (push (muifun N M)    REST) ENV),

	(IC (push (uifun NVAE1 AE2)        REST)  ENV) =>
	(IC (push NVAE1 (push (uifunhl AE2) REST)) ENV),
  
 	(IC (push N (push (uifunhl AE2) REST)) ENV) =>
 	(IC (push (uifun N AE2)        REST)  ENV),

 	(IC (push (uifun N NVAE2)        REST)  ENV) =>
 	(IC (push NVAE2 (push (uifunhr N) REST)) ENV),

 	(IC (push M (push (uifunhr N) REST)) ENV) =>
 	(IC (push (uifun N M)        REST)  ENV),

// subtraction operator
 	(IC (push (minus N M)     REST) ENV) =>
 	(IC (push (mminus N M)    REST) ENV),

	(IC (push (minus NVAE1 AE2)        REST)  ENV) =>
	(IC (push NVAE1 (push (minushl AE2) REST)) ENV),
  
 	(IC (push N (push (minushl AE2) REST)) ENV) =>
 	(IC (push (minus N AE2)        REST)  ENV),

 	(IC (push (minus N NVAE2)        REST)  ENV) =>
 	(IC (push NVAE2 (push (minushr N) REST)) ENV),

 	(IC (push M (push (minushr N) REST)) ENV) =>
 	(IC (push (minus N M)        REST)  ENV),

// for statement
 	(IC (push (for X NVAE1 NVAE2 S)        REST ) ENV) =>
 	(IC (push NVAE1 (push (forhl X NVAE2 S) REST)) ENV),

 	(IC (push N (push (forhl X NVAE2 S) REST)) ENV) =>
 	(IC (push (for X N NVAE2 S)        REST)  ENV),

 	(IC (push (for X N NVAE2 S)            REST ) ENV) =>
 	(IC (push NVAE2 (push (forhr X N S)     REST)) ENV),

 	(IC (push M (push (forhr X N S) REST)) ENV) =>
 	(IC (push (for X N M S)        REST)  ENV),

	(IC (push (for X N M S)                                         REST) ENV) /\ (mle N M) =>
	(IC (push (seq (assign X N) S) (push (for X (mplus N 1) M S) REST)) ENV),

	(IC (push (for X N M S) REST) ENV) /\ (bnot (mle N M)) =>
	(IC                       REST ENV),

// less than or equal to operator2

 	(IC (push (le N M)  REST) ENV) =>
 	(IC (push (mle N M) REST) ENV),

 	(IC (push (le NVAE1 AE2)        REST)  ENV) =>
 	(IC (push NVAE1 (push (lehl AE2) REST)) ENV),

 	(IC (push N (push (lehl AE2) REST)) ENV) =>
 	(IC (push (le N AE2)        REST)  ENV),

 	(IC (push (le N NVAE2)        REST)  ENV) =>
 	(IC (push NVAE2 (push (lehr N) REST)) ENV),
  
 	(IC (push M (push (lehr N) REST)) ENV) =>
 	(IC (push (le N M)       REST)  ENV),

// strictly less than

 	(IC (push (less N M)  REST) ENV) =>
 	(IC (push (mless N M) REST) ENV),

 	(IC (push (less NVAE1 AE2)        REST)  ENV) =>
 	(IC (push NVAE1 (push (lesshl AE2) REST)) ENV),

 	(IC (push N (push (lesshl AE2) REST)) ENV) =>
 	(IC (push (less N AE2)        REST)  ENV),

 	(IC (push (less N NVAE2)        REST)  ENV) =>
 	(IC (push NVAE2 (push (lesshr N) REST)) ENV),
  
 	(IC (push M (push (lesshr N) REST)) ENV) =>
 	(IC (push (less N M)       REST)  ENV),

// multiplication operator
 	(IC (push (times N M)     REST) ENV) =>
 	(IC (push (mtimes N M)    REST) ENV),

	(IC (push (times NVAE1 AE2)        REST)  ENV) =>
	(IC (push NVAE1 (push (timeshl AE2) REST)) ENV),
  
 	(IC (push N (push (timeshl AE2) REST)) ENV) =>
 	(IC (push (times N AE2)        REST)  ENV),

 	(IC (push (times N NVAE2)        REST)  ENV) =>
 	(IC (push NVAE2 (push (timeshr N) REST)) ENV),

 	(IC (push M (push (timeshr N) REST)) ENV) =>
 	(IC (push (times N M)        REST)  ENV),

// division operator
 	(IC (push (div N M)     REST) ENV) =>
 	(IC (push (mdiv N M)    REST) ENV),

	(IC (push (div NVAE1 AE2)        REST)  ENV) =>
	(IC (push NVAE1 (push (divhl AE2) REST)) ENV),
  
 	(IC (push N (push (divhl AE2) REST)) ENV) =>
 	(IC (push (div N AE2)        REST)  ENV),

 	(IC (push (div N NVAE2)        REST)  ENV) =>
 	(IC (push NVAE2 (push (divhr N) REST)) ENV),

 	(IC (push M (push (divhr N) REST)) ENV) =>
 	(IC (push (div N M)        REST)  ENV)
;

constrained-rewrite-system flanguage
	(contextexp (feven FNV) ENV) => (feven (contextexp FNV ENV)),
	(feven (contextexp I ENV)) => (contextexp (feven I) ENV),
	(contextexp (feven I) ENV) => (contextexp (meven I) ENV),

	(contextexp (fnot FNV) ENV) => (fnot (contextexp FNV ENV)),
	(fnot (contextexp B ENV)) => (contextexp (fnot B) ENV),
	(contextexp (fnot B) ENV) => (contextexp (bnot B) ENV),

	(contextexp (fdiv FNV FEXP) ENV) => (fdiv (contextexp FNV ENV) FEXP),
	(fdiv (contextexp I ENV) FEXP) => (contextexp (fdiv I FEXP) ENV),
	(contextexp (fdiv I FNV) ENV) => (fdiv I (contextexp FNV ENV)),
	(fdiv I (contextexp J ENV)) => (contextexp (fdiv I J) ENV),
	(contextexp (fdiv I J) ENV) => (contextexp (mdiv I J) ENV),

	(contextexp (ftimes FNV FEXP) ENV) => (ftimes (contextexp FNV ENV) FEXP),
	(ftimes (contextexp I ENV) FEXP) => (contextexp (ftimes I FEXP) ENV),
	(contextexp (ftimes I FNV) ENV) => (ftimes I (contextexp FNV ENV)),
	(ftimes I (contextexp J ENV)) => (contextexp (ftimes I J) ENV),
	(contextexp (ftimes I J) ENV) => (contextexp (mtimes I J) ENV),

	(contextexp (fequals FNV FEXP) ENV) => (fequals (contextexp FNV ENV) FEXP),
	(fequals (contextexp I ENV) FEXP) => (contextexp (fequals I FEXP) ENV),
	(contextexp (fequals I FNV) ENV) => (fequals I (contextexp FNV ENV)),
	(fequals I (contextexp J ENV)) => (contextexp (fequals I J) ENV),
	(contextexp (fequals I J) ENV) => (contextexp (mequals I J) ENV),

	(contextexp (fplus FNV FEXP) ENV) => (fplus (contextexp FNV ENV) FEXP),
	(fplus (contextexp I ENV) FEXP) => (contextexp (fplus I FEXP) ENV),
	(contextexp (fplus I FNV) ENV) => (fplus I (contextexp FNV ENV)),
	(fplus I (contextexp J ENV)) => (contextexp (fplus I J) ENV),
	(contextexp (fplus I J) ENV) => (contextexp (mplus I J) ENV),

	(contextexp (fminus FNV FEXP) ENV) => (fminus (contextexp FNV ENV) FEXP),
	(fminus (contextexp I ENV) FEXP) => (contextexp (fminus I FEXP) ENV),
	(contextexp (fminus I FNV) ENV) => (fminus I (contextexp FNV ENV)),
	(fminus I (contextexp J ENV)) => (contextexp (fminus I J) ENV),
	(contextexp (fminus I J) ENV) => (contextexp (mminus I J) ENV),
	
	(contextexp (fless FNV FEXP) ENV) => (fless (contextexp FNV ENV) FEXP),
	(fless (contextexp I ENV) FEXP) => (contextexp (fless I FEXP) ENV),
	(contextexp (fless I FNV) ENV) => (fless I (contextexp FNV ENV)),
	(fless I (contextexp J ENV)) => (contextexp (fless I J) ENV),
	(contextexp (fless I J) ENV) => (contextexp (mless I J) ENV),
	
	(contextexp (fle FNV FEXP) ENV) => (fle (contextexp FNV ENV) FEXP),
	(fle (contextexp I ENV) FEXP) => (contextexp (fle I FEXP) ENV),
	(contextexp (fle I FNV) ENV) => (fle I (contextexp FNV ENV)),
	(fle I (contextexp J ENV)) => (contextexp (fle I J) ENV),
	(contextexp (fle I J) ENV) => (contextexp (mle I J) ENV),

	(contextexp (fite FNV FEXP1 FEXP2) ENV) => (fite (contextexp FNV ENV) FEXP1 FEXP2),
	(fite (contextexp B ENV) FEXP1 FEXP2) => (contextexp (fite B FEXP1 FEXP2) ENV),
	(contextexp (fite true FEXP1 FEXP2) ENV) => (contextexp FEXP1 ENV),
	(contextexp (fite false FEXP1 FEXP2) ENV) => (contextexp FEXP2 ENV),

	(contextexp (app FNV FEXP) ENV) => (app (contextexp FNV ENV) FEXP),
	(app (contextexp (lam XF FEXP1) ENV) FEXP2) => (contextexp (app (lam XF FEXP1) FEXP2) ENV),
	(contextexp (app (lam XF FEXP1) FNV) ENV) => (app (lam XF FEXP1) (contextexp FNV ENV)),
	(app (lam XF FEXP1) (contextexp VF ENV)) => (contextexp (app (lam XF FEXP1) VF) ENV),
	(contextexp (app (lam XF FEXP1) VF) ENV) => (contextexp (substitute XF VF FEXP1) ENV),
	
	(contextexp (miu XF FEXP) ENV) => (contextexp (substitute XF (miu XF FEXP) FEXP) ENV),

	(contextexp (fassign X I) ENV) => (contextexp I (update ENV X I)),
	(contextexp (fassign X FNV) ENV) => (fassign X (contextexp FNV ENV)),
	(fassign X (contextexp I ENV)) => (contextexp (fassign X I) ENV),
	(contextexp X ENV) => (contextexp (flookup ENV X) ENV),

	//list operations
	(contextexp (fmap FEXP1 fnull) ENV) => (contextexp fnull ENV),
	(contextexp (fmap FEXP1 FNV) ENV) => (fmap FEXP1 (contextexp FNV ENV)),
	(fmap FEXP1 (contextexp VF ENV)) => (contextexp (fmap FEXP1 VF) ENV),
	(contextexp (fmap FEXP1 (fcons FEXP RESTF)) ENV) => ( fcons (contextexp (app FEXP1 FEXP) ENV) (fmap FEXP1 RESTF) ),
	(fcons (contextexp I ENV) FEXP) => ( fcons I (contextexp FEXP ENV)),
	(fcons I (contextexp VF ENV)) => (contextexp (fcons I VF) ENV),

	(contextexp (ftake FNV RESTF) ENV) => (ftake (contextexp FNV ENV) RESTF),
	(ftake (contextexp I ENV) RESTF) => (contextexp (ftake I RESTF) ENV),
	(contextexp (ftake I RESTF) ENV) /\ (mle I 0) => (contextexp fnull ENV),
	(contextexp (ftake I fnull) ENV) /\ (bnot (mle I 0)) => (contextexp fnull ENV),
	(contextexp (ftake I FNV) ENV) => (ftake I (contextexp FNV ENV)),
	(ftake I (contextexp VF ENV)) => (contextexp (ftake I VF) ENV),
	(contextexp (ftake I (fcons FEXP RESTF)) ENV) /\ (bnot (mle I 0)) => (fcons (contextexp FEXP ENV) (ftake (fminus I 1) RESTF))
;

/*
show-equivalent [100, 1] in language and flanguage :
   (pair (IC (push 
		(seq (assign x 1)
		    (seq (assign y 2)
		        (assign x (plus x y)))) done) ENV)
	(F (contextexp (app (app (lam fvarX (lam fvarY (fplus fvarX fvarY))) 2) 1))))
 with-base
     (pair (IC done ENV) (F (contextexp SUM))) /\ (mequals (lookup ENV x) SUM);
*/

constrained-rewrite-system circularities0
(F (contextexp (fplus 1 2) ENV1))
=>
(F (contextexp 3 ENV2))
;

constrained-rewrite-system circularities1
(F (contextexp (fplus 1 (fassign X 2)) ENV1))
/\ (mequals (flookup ENV2 X) 2)
=>
(F (contextexp 3 ENV2))
;

constrained-rewrite-system circularities2
(F (contextexp (fplus (fassign X 2) X) ENV1))
=>
(F (contextexp 4 ENV2))
;

constrained-rewrite-system circularities3
(F (contextexp (app (
	miu fvarF (
		lam fvarX
			(fite (fle 0 fvarX)
				(fplus fvarX (app fvarF (fminus fvarX 1 )))
				0
			)
		)
	)2) ENV1))
=>
(F (contextexp 3 ENV2))
;

constrained-rewrite-system circularities4
(F (contextexp (app (app (
	miu fvarF (
		lam fvarX (lam fvarY
			(fite (fle 0 fvarX)
				(app (app fvarF (fminus fvarX 1)) (fplus fvarY fvarX))
				fvarY
			)
		))
	) 2 ) 0 ) ENV1))
=>
(F (contextexp 3 ENV2))
;

//prove in flanguage : circularities0;
//prove in flanguage : circularities1;
//prove [10,10] in flanguage : circularities2;
//prove [100, 100] in flanguage : circularities3;
//prove [100, 100] in flanguage : circularities4;

//F(fcons(contextexp(mplus(0,1),ENV1),fmap(lam(fvarX,fplus(fvarX,1)),fcons(1,fnull)))) if band(band(mapequals(ENV1,ENV1),vfequals(fvarX,fvarX)),mapequals(ENV1,ENV1))

search [1,100] in flanguage : (F (contextexp
	//(fmap (lam fvarX (fplus fvarX 1)) (fcons 0 (fcons 1 fnull)))
	//(ftake 1 (fmap (lam fvarX (fplus fvarX 1)) (fcons 0 (fcons 1 fnull))) )
	(fmap (lam fvarX (fplus fvarX 1)) (ftake 1 (fcons 0 (fcons 1 fnull))))
	//(ftake 2 (fmap fvarX fnull))
	ENV1));

/*
works 1:
show-equivalent [ 100, 1 ] in language and flanguage :
   (pair (IC (push 
		(seq (assign x 1)
		    (seq (assign y 2)
		        (assign x (plus x y)))) done) ENV)
         (F (contextexp (fplus 1 (fassign X 2)) ENV1)))
with-base
     (pair (IC done ENV2) (F (contextexp SUM ENVP))) /\ (band (mequals (lookup ENV2 x) SUM) (mequals (lookup ENVP X) 2));
*/

/*
works 2:
show-equivalent [ 100, 1 ] in language and flanguage :
(pair (IC (push 
		(seq (assign x 1)
		    (seq (assign y 2)
		        (assign x (plus x y)))) done) ENV)
(F (contextexp (app (
	miu fvarF (
		lam fvarX
			(fite (fle fvarX 2)
				(fplus fvarX (app fvarF (fplus (fassign X fvarX) 1 )))
				0
			)
		)
	) 1) ENV1)))
with-base
     (pair (IC done ENV2) (F (contextexp SUM ENVP))) /\ (band (mequals (lookup ENV2 x) SUM) (mequals (lookup ENVP X) 2));
*/

/*
show-equivalent in language and flanguage :
(pair
(IC (push (while (not (iequals x 1)) 
              (seq (assign y (plus y 1)) 
	          (ite (ieven x) (assign x (div x 2)) 
		                (assign x (plus (times x 3) 1))))) 
	done) ENV) 

(F (contextexp 
   (fite (fnot (fequals N 1)) 
        (fite (feven N) 
	     (app (app 

(miu fvarF (lam fvarX (lam fvarY 
   (fite (fnot (fequals fvarX 1)) 
        (fite (feven fvarX) 
	     (app (app fvarF (fdiv fvarX 2)) (fplus fvarY 1)) 
	     (app (app fvarF (fplus (ftimes fvarX 3) 1)) (fplus fvarY 1))) 
	fvarY)))) 
             (fdiv N 2)) (fplus I 1)) 
	     
	     (app (app 
(miu fvarF (lam fvarX (lam fvarY
   (fite (fnot (fequals fvarX 1))
        (fite (feven fvarX)
	     (app (app fvarF (fdiv fvarX 2)) (fplus fvarY 1))
	     (app (app fvarF (fplus (ftimes fvarX 3) 1)) (fplus fvarY 1)))
	fvarY))))
	     (fplus (ftimes N 3) 1)) (fplus I 1)))
	I) ENV1)))
/\ (band (mequals (lookup ENV x) N)
        (mequals (lookup ENV y) I))

with-base

(pair (IC done ENV) (F (contextexp N ENV1))) /\ (mequals (lookup ENV y) N);
*/



/* ----------- some temporary examples ---------------------- */

/*
show-equivalent [200, 200] in flanguage and flanguage :
   (pair

   	(F (contextexp (app (
	miu fvarF (
		lam fvarX
			(fite (fle 0 fvarX)
				(fplus fvarX (app fvarF (fminus fvarX 1 )))
				0
			)
		)
	) 2 ) ENV1))

	(F (contextexp (app (app (
	miu fvarF (
		lam fvarX (lam fvarY
			(fite (fle 0 fvarX)
				(app (app fvarF (fminus fvarX 1)) (fplus fvarY fvarX))
				fvarY
			)
		))
	) 2 ) 0 ) ENV2))

	)
 with-base
     (pair (F (contextexp SUM ENV1)) (F (contextexp SUM ENV2)));
*/

/*
show-equivalent [200, 200] in flanguage and flanguage :
   (pair

   	(F (contextexp (app (
	miu fvarF (
		lam fvarX
			(fite (fle 0 fvarX)
				(fplus fvarX (app fvarF (fminus fvarX 1 )))
				0
			)
		)
	) N ) ENV1))

	(F (contextexp (app (app (
	miu fvarF (
		lam fvarX (lam fvarY
			(fite (fle 0 fvarX)
				(app (app fvarF (fminus fvarX 1)) (fplus fvarY fvarX))
				fvarY
			)
		))
	) N ) 0 ) ENV2))

	)
 with-base
     (pair (F (contextexp SUM ENV1)) (F (contextexp SUM ENV2)));
*/

/*
show-equivalent [200, 200] in flanguage and flanguage :
   (pair

   	(F (contextexp (fplus I (app (
	miu fvarF (
		lam fvarX
			(fite (fle 0 fvarX)
				(fplus fvarX (app fvarF (fminus fvarX 1 )))
				0
			)
		)
	) N ) ) ENV1))

	(F (contextexp (app (app (
	miu fvarF (
		lam fvarX (lam fvarY
			(fite (fle 0 fvarX)
				(app (app fvarF (fminus fvarX 1)) (fplus fvarY fvarX))
				fvarY
			)
		))
	) N ) I ) ENV2))

	)
 with-base
     (pair (F (contextexp SUM ENV1)) (F (contextexp SUM ENV2)));
*/
