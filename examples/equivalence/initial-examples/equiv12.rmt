sorts State, ExpF;

subsort Int < ExpF;

signature
  pair : ExpF ExpF -> State,
  fplus : ExpF ExpF -> ExpF,
  f : ExpF -> ExpF,
  fa : ExpF ExpF -> ExpF;

variables N:Int, I:Int, S:Int, E : ExpF;

define reduce : Int Int ExpF -> ExpF by
  (reduce N I E) /\ (mle N I) => E,
  (reduce N I E) /\ (bnot (mle N I)) => (reduce N (mplus I 1) (fplus I E));

constrained-rewrite-system flanguage

  (f N) /\ (mle N 0) => 0,
  (f N) /\ (bnot (mle N 0)) => (fplus N (f (mminus N 1))),
  (fa I N) /\ (mle N 0) => I,
  (fa I N) /\ (bnot (mle N 0)) => (fa (mplus I N) (mminus N 1)),
  (fplus N I) => (mplus N I);

/* This works
show-equivalent [ 100, 100 ] in flanguage and flanguage :
   (pair
    (f 3)
    (fa 0 3)
    )
with-base
     (pair 6 6);
*/

show-equivalent [ 100, 100 ] in flanguage and flanguage :
   (pair
    (f 2)
    (fa 0 2)
    )
with-base
     (pair S S);
