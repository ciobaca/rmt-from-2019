/*
*/

sorts
      Var,
      Code,
      Stack,
      Map / "(Array Int Int)",
      Cfg,
      State,
      Exp,
      NonValExp,
      ValExp
    ;

subsort Bool < ValExp;
subsort Int < ValExp;
subsort Var < NonValExp;
subsort ValExp < Exp;
subsort NonValExp < Exp;

signature
  
  P : Exp Map -> Cfg,
  pair : Cfg Cfg -> State,

  var : Int -> Var,
  update : Map Int Int -> Map / "store",
  lookup  : Map Int -> Int / "select",

  done : -> Stack,
  push : Exp Stack -> Stack,

  plus : Exp Exp -> NonValExp,
  times : Exp Exp -> NonValExp,
  minus : Exp Exp -> NonValExp,
  le : Exp Exp -> NonValExp,
  less : Exp Exp -> NonValExp,
  ite : Exp Exp Exp -> NonValExp,
  not : Exp -> NonValExp,

  assign : Var Exp -> NonValExp,
  while : Exp Exp -> NonValExp,
  skip : -> NonValExp,
  seq : Exp Exp -> NonValExp,

  app : Exp Exp -> NonValExp,
  miu : Var Exp -> NonValExp,
  lam : Var Exp -> ValExp,

  |_| : -> NonValExp
;

variables
  X : Int,
  Y : Int,
  Z : Int,
  T : Int,
  I : Int,
  J : Int,
  N : Int,
  SUM : Int,
  S : Int,
  C1 : Int,
  C2 : Int,
  C3 : Int,
  B1 : Bool,
  V1 : Int,
  V2 : Int,

  B : Bool,

  REST : Stack,
  ENV : Map,
  ENV1 : Map,
  ENV2 : Map,
  ENV3 : Map,
  ENV4 : Map,

  EXP : Exp,
  EXP1 : Exp,
  EXP2 : Exp,
  EXP3 : Exp,
  FNV : NonValExp,
  VF : ValExp;

define substitute : Var Exp Exp -> Exp by
  (substitute (var X) EXP I) => I,
  (substitute (var X) EXP B) => B,
  (substitute (var X) EXP (var X)) => EXP,
  (substitute (var X) EXP (var Y)) /\ (bnot (mequals X Y)) => (var Y),

  (substitute (var X) EXP (plus EXP1 EXP2)) => (plus (substitute (var X) EXP EXP1) (substitute (var X) EXP EXP2)),
  (substitute (var X) EXP (times EXP1 EXP2)) => (times (substitute (var X) EXP EXP1) (substitute (var X) EXP EXP2)),
  (substitute (var X) EXP (minus EXP1 EXP2)) => (minus (substitute (var X) EXP EXP1) (substitute (var X) EXP EXP2)),
  (substitute (var X) EXP (less EXP1 EXP2)) => (less (substitute (var X) EXP EXP1) (substitute (var X) EXP EXP2)),
  (substitute (var X) EXP (le EXP1 EXP2)) => (le (substitute (var X) EXP EXP1) (substitute (var X) EXP EXP2)),
  (substitute (var X) EXP (not EXP1)) => (not (substitute (var X) EXP EXP1)),
  (substitute (var X) EXP (ite EXP1 EXP2 EXP3)) => (ite (substitute (var X) EXP EXP1) (substitute (var X) EXP EXP2) (substitute (var X) EXP EXP3)),

  (substitute (var X) EXP (assign (var Y) EXP1)) => (assign (var Y) (substitute (var X) EXP EXP1)),
  (substitute (var X) EXP (while EXP1 EXP2)) => (while (substitute (var X) EXP EXP1) (substitute (var X) EXP EXP2)),
  (substitute (var X) EXP (seq EXP1 EXP2)) => (seq (substitute (var X) EXP EXP1) (substitute (var X) EXP EXP2)),

  (substitute (var X) EXP (app EXP1 EXP2)) => (app (substitute (var X) EXP EXP1) (substitute (var X) EXP EXP2)),

  (substitute (var X) EXP1 (lam (var X) EXP)) => (lam (var X) EXP),
  (substitute (var X) EXP1 (lam (var Y) EXP)) /\ (bnot (mequals X Y)) => (lam (var Y) (substitute (var X) EXP1 EXP)),

  (substitute (var X) EXP1 (miu (var X) EXP)) => (miu (var X) EXP),
  (substitute (var X) EXP1 (miu (var Y) EXP)) /\ (bnot (mequals X Y)) => (miu (var Y) (substitute (var X) EXP1 EXP))
  ;

constrained-rewrite-system fun1

  (P (push (var X) REST) ENV) => (P (push (lookup ENV X) REST) ENV),

  (P (push (plus FNV EXP) REST) ENV) => (P (push FNV (push (plus |_| EXP) REST)) ENV),
  (P (push I (push (plus |_| EXP) REST)) ENV) => (P (push (plus I EXP) REST) ENV),
  (P (push (plus I FNV) REST) ENV) => (P (push FNV (push (plus I |_|) REST)) ENV),
  (P (push J (push (plus I |_|) REST)) ENV) => (P (push (plus I J) REST) ENV),
  (P (push (plus I J) REST) ENV) => (P (push (mplus I J) REST) ENV),

  (P (push (times FNV EXP) REST) ENV) => (P (push FNV (push (times |_| EXP) REST)) ENV),
  (P (push I (push (times |_| EXP) REST)) ENV) => (P (push (times I EXP) REST) ENV),
  (P (push (times I FNV) REST) ENV) => (P (push FNV (push (times I |_|) REST)) ENV),
  (P (push J (push (times I |_|) REST)) ENV) => (P (push (times I J) REST) ENV),
  (P (push (times I J) REST) ENV) => (P (push (mtimes I J) REST) ENV),

  (P (push (minus FNV EXP) REST) ENV) => (P (push FNV (push (minus |_| EXP) REST)) ENV),
  (P (push I (push (minus |_| EXP) REST)) ENV) => (P (push (minus I EXP) REST) ENV),
  (P (push (minus I FNV) REST) ENV) => (P (push FNV (push (minus I |_|) REST)) ENV),
  (P (push J (push (minus I |_|) REST)) ENV) => (P (push (minus I J) REST) ENV),
  (P (push (minus I J) REST) ENV) => (P (push (mminus I J) REST) ENV),

  (P (push (less FNV EXP) REST) ENV) => (P (push FNV (push (less |_| EXP) REST)) ENV),
  (P (push I (push (less |_| EXP) REST)) ENV) => (P (push (less I EXP) REST) ENV),
  (P (push (less I FNV) REST) ENV) => (P (push FNV (push (less I |_|) REST)) ENV),
  (P (push J (push (less I |_|) REST)) ENV) => (P (push (less I J) REST) ENV),
  (P (push (less I J) REST) ENV) => (P (push (mless I J) REST) ENV),

  (P (push (le FNV EXP) REST) ENV) => (P (push FNV (push (le |_| EXP) REST)) ENV),
  (P (push I (push (le |_| EXP) REST)) ENV) => (P (push (le I EXP) REST) ENV),
  (P (push (le I FNV) REST) ENV) => (P (push FNV (push (le I |_|) REST)) ENV),
  (P (push J (push (le I |_|) REST)) ENV) => (P (push (le I J) REST) ENV),
  (P (push (le I J) REST) ENV) => (P (push (mle I J) REST) ENV),

  (P (push (not B) REST) ENV) => (P (push (bnot B) REST) ENV),
  (P (push (not FNV) REST) ENV) => (P (push FNV (push (not |_|) REST)) ENV),
  (P (push B (push (not |_|) REST)) ENV) => (P (push (not B) REST) ENV),

  (P (push (ite FNV EXP1 EXP2) REST) ENV) => (P (push FNV (push (ite |_| EXP1 EXP2) REST)) ENV),
  (P (push B (push (ite |_| EXP1 EXP2) REST)) ENV) => (P (push (ite B EXP1 EXP2) REST) ENV),
  (P (push (ite true EXP1 EXP2) REST) ENV) => (P (push EXP1 REST) ENV),
  (P (push (ite false EXP1 EXP2) REST) ENV) => (P (push EXP2 REST) ENV),

  (P (push (assign (var X) I) REST) ENV) => (P (push I REST) (update ENV X I)),
  (P (push (assign (var X) FNV) REST) ENV) => (P (push FNV (push (assign (var X) |_|) REST)) ENV),
  (P (push I (push (assign (var X) |_|) REST)) ENV) => (P (push (assign (var X) I) REST) ENV),

  (P (push (seq VF EXP2) REST) ENV) => (P (push EXP2 REST) ENV),
  (P (push (seq FNV EXP2) REST) ENV) => (P (push FNV (push (seq |_| EXP2) REST)) ENV),
  (P (push VF (push (seq |_| EXP2) REST)) ENV) => (P (push (seq VF EXP2) REST) ENV),

  (P (push (while EXP1 EXP2) REST) ENV) => (P (push (ite EXP1 (seq EXP2 (while EXP1 EXP2)) skip) REST) ENV),
  (P (push skip REST) ENV) => (P (push 0 REST) ENV),

  (P (push (app FNV EXP) REST) ENV) => (P (push FNV (push (app |_| EXP) REST)) ENV),
  (P (push (lam (var X) EXP1) (push (app |_| EXP) REST)) ENV) => (P (push (app (lam (var X) EXP1) EXP) REST) ENV),
  (P (push (app (lam (var X) EXP1) FNV) REST) ENV) => (P (push FNV (push (app (lam (var X) EXP1) |_|) REST)) ENV),
  (P (push VF (push (app (lam (var X) EXP1) |_|) REST)) ENV) => (P (push (app (lam (var X) EXP1) VF) REST) ENV),
  (P (push (app (lam (var X) EXP1) VF) REST) ENV) => (P (push (substitute (var X) VF EXP1) REST) ENV),

  (P (push (miu (var X) EXP) REST) ENV) => (P (push (substitute (var X) (miu (var X) EXP) EXP) REST) ENV)
;

show-simulation useDFS [300, total] in fun1 and fun1 :

(pair

  (P (push 
    (seq
      (assign (var V1) (plus (var C1) (var V2)))
      (while
        (less (var V1) (var V2))
        (seq
          (assign (var C2) (plus (plus (var C1) (var C2)) (plus (var V1) (var V2))))
          (seq
            (assign (var C3) (plus (plus (var C1) (var C3)) (plus (var V1) (var V2))))
            (assign (var V1) (plus (var V1) 1))
            )
          )
        )
      )
  done) ENV3)

  (P (push
    (seq
      (seq
        (assign (var V1) (plus (var C1) (var V2)))
        (while
          (less (var V1) (var V2))
          (seq
            (assign (var C2) (plus (plus (var C1) (var C2)) (plus (var V1) (var V2))))
            (assign (var V1) (plus (var V1) 1))
            )
          )
        )
      (seq
        (assign (var V1) (plus (var C1) (var V2)))
        (while
          (less (var V1) (var V2))
          (seq
            (assign (var C3) (plus (plus (var C1) (var C3)) (plus (var V1) (var V2))))
            (assign (var V1) (plus (var V1) 1))
            )
          )
        )
      )
  done) ENV4)

) /\ (band
/* constraints which ensure equality of variables in the two environments */
(band
      (mequals (lookup ENV3 C1) (lookup ENV4 C1))
      (band
        (mequals (lookup ENV3 C2) (lookup ENV4 C2))
        (band
          (mequals (lookup ENV3 V1) (lookup ENV4 V1))
          (band
            (mequals (lookup ENV3 V2) (lookup ENV4 V2))
            (mequals (lookup ENV3 C3) (lookup ENV4 C3))
            )
          )
      )
      )
 /* constraints which ensure that program variables are distinct */
 (band
    (bnot (mequals C1 C2))
    (band
      (bnot (mequals C1 V1))
      (band
        (bnot (mequals C1 V2))
        (band
          (bnot (mequals C2 V1))
          (band
            (bnot (mequals C2 V2))
            (band
              (bnot (mequals V1 V2))
              (band
                (bnot (mequals C3 V1))
                (band
                  (bnot (mequals C3 V2))
                  (band
                    (bnot (mequals C3 C1))
                    (bnot (mequals C3 C2))
                    )
                  )
                )
              )
          )
        )
      )
    ))
 ),

(pair

  (P (push 
    (seq
      (assign (var V1) (plus (var C1) (var V2)))
      (while
        (less (var V1) (var V2))
        (seq
          (assign (var C2) (plus (plus (var C1) (var C2)) (plus (var V1) (var V2))))
          (seq
            (assign (var C3) (plus (plus (var C1) (var C3)) (plus (var V1) (var V2))))
            (assign (var V1) (plus (var V1) 1))
            )
          )
        )
      )
  done) ENV3)

  (P (push        
        (while
          (less (var V1) (var V2))
          (seq
            (assign (var C2) (plus (plus (var C1) (var C2)) (plus (var V1) (var V2))))
            (assign (var V1) (plus (var V1) 1))
            )
          )
  (push (seq |_|
    (seq
        (assign (var V1) (plus (var C1) (var V2)))
        (while
          (less (var V1) (var V2))
          (seq
            (assign (var C3) (plus (plus (var C1) (var C3)) (plus (var V1) (var V2))))
            (assign (var V1) (plus (var V1) 1))
            )
          )
        )
    ) done)
  ) ENV4)

) /\ (band (band
/* circularity constraints */
  (band
    (mequals (lookup ENV4 V1) (mplus (lookup ENV4 C1) (lookup ENV4 V2)))
    true
  )
/* constraints which ensure equality of variables in the two environments */
(band
      (mequals (lookup ENV3 C1) (lookup ENV4 C1))
      (band
        (mequals (lookup ENV3 C2) (lookup ENV4 C2))
        (band
          true /*(mequals (lookup ENV3 V1) (lookup ENV4 V1))*/
          (band
            (mequals (lookup ENV3 V2) (lookup ENV4 V2))
            (mequals (lookup ENV3 C3) (lookup ENV4 C3))
            )
          )
      )
      ))
 /* constraints which ensure that program variables are distinct */
 (band
    (bnot (mequals C1 C2))
    (band
      (bnot (mequals C1 V1))
      (band
        (bnot (mequals C1 V2))
        (band
          (bnot (mequals C2 V1))
          (band
            (bnot (mequals C2 V2))
            (band
              (bnot (mequals V1 V2))
              (band
                (bnot (mequals C3 V1))
                (band
                  (bnot (mequals C3 V2))
                  (band
                    (bnot (mequals C3 C1))
                    (bnot (mequals C3 C2))
                    )
                  )
                )
              )
          )
        )
      )
    ))
 )
,

[assumed]
(pair

  (P (push 
    (seq
      (assign (var V1) (plus (var C1) (var V2)))
      (while
        (less (var V1) (var V2))
        (seq
          (assign (var C2) (plus (plus (var C1) (var C2)) (plus (var V1) (var V2))))
          (seq
            (assign (var C3) (plus (plus (var C1) (var C3)) (plus (var V1) (var V2))))
            (assign (var V1) (plus (var V1) 1))
            )
          )
        )
      )
  done) ENV3)

  (P (push
      (while
        (less (var V1) (var V2))
        (seq
          (assign (var C3) (plus (plus (var C1) (var C3)) (plus (var V1) (var V2))))
          (assign (var V1) (plus (var V1) 1))
          )
        )
    done
  ) ENV4)

) /\ (band (band
/* circularity constraints */
  (band
    (mequals (lookup ENV4 V1) (mplus (lookup ENV4 C1) (lookup ENV4 V2)))
    true
  )
/* constraints which ensure equality of variables in the two environments */
(band
      (mequals (lookup ENV3 C1) (lookup ENV4 C1))
      (band
        (mequals (lookup ENV3 C2) (lookup ENV4 C2))
        (band
          true /*(mequals (lookup ENV3 V1) (lookup ENV4 V1))*/
          (band
            (mequals (lookup ENV3 V2) (lookup ENV4 V2))
            (mequals (lookup ENV3 C3) (lookup ENV4 C3))
            )
          )
      )
      ))
 /* constraints which ensure that program variables are distinct */
 (band
    (bnot (mequals C1 C2))
    (band
      (bnot (mequals C1 V1))
      (band
        (bnot (mequals C1 V2))
        (band
          (bnot (mequals C2 V1))
          (band
            (bnot (mequals C2 V2))
            (band
              (bnot (mequals V1 V2))
              (band
                (bnot (mequals C3 V1))
                (band
                  (bnot (mequals C3 V2))
                  (band
                    (bnot (mequals C3 C1))
                    (bnot (mequals C3 C2))
                    )
                  )
                )
              )
          )
        )
      )
    ))
 )


with-base
    (pair (P (push I done) ENV1) (P (push J done) ENV2)) /\
    (band
      (mequals (lookup ENV1 C1) (lookup ENV2 C1))
      (band
        (mequals (lookup ENV1 C2) (lookup ENV2 C2))
        (band
          (mequals (lookup ENV1 V1) (lookup ENV2 V1))
          (band
            (mequals (lookup ENV1 V2) (lookup ENV2 V2))
            (mequals (lookup ENV1 C3) (lookup ENV2 C3))
            )
          )
      )
      )
;
