/*
*/

sorts
      Var,
      Code,
      Stack,
      Map / "(Array Int Int)",
      Cfg,
      State,
      Exp,
      NonValExp,
      ValExp
    ;

subsort Bool < ValExp;
subsort Int < ValExp;
subsort Var < NonValExp;
subsort ValExp < Exp;
subsort NonValExp < Exp;

signature
  
  P : Exp Map -> Cfg,
  pair : Cfg Cfg -> State,

  var : Int -> Var,
  update : Map Int Int -> Map / "store",
  lookup  : Map Int -> Int / "select",

  done : -> Stack,
  push : Exp Stack -> Stack,

  plus : Exp Exp -> NonValExp,
  times : Exp Exp -> NonValExp,
  minus : Exp Exp -> NonValExp,
  le : Exp Exp -> NonValExp,
  less : Exp Exp -> NonValExp,
  ite : Exp Exp Exp -> NonValExp,
  not : Exp -> NonValExp,

  assign : Var Exp -> NonValExp,
  while : Exp Exp -> NonValExp,
  skip : -> NonValExp,
  seq : Exp Exp -> NonValExp,

  app : Exp Exp -> NonValExp,
  miu : Var Exp -> NonValExp,
  lam : Var Exp -> ValExp,

  |_| : -> NonValExp
;

variables
  X : Int,
  Y : Int,
  Z : Int,
  I : Int,
  J : Int,
  N : Int,
  SUM : Int,
  S : Int,

  B : Bool,

  REST : Stack,
  ENV : Map,
  ENV1 : Map,
  ENV2 : Map,
  ENV3 : Map,

  EXP : Exp,
  EXP1 : Exp,
  EXP2 : Exp,
  EXP3 : Exp,
  FNV : NonValExp,
  VF : ValExp;

define substitute : Var Exp Exp -> Exp by
  (substitute (var X) EXP I) => I,
  (substitute (var X) EXP B) => B,
  (substitute (var X) EXP (var X)) => EXP,
  (substitute (var X) EXP (var Y)) /\ (bnot (mequals X Y)) => (var Y),

  (substitute (var X) EXP (plus EXP1 EXP2)) => (plus (substitute (var X) EXP EXP1) (substitute (var X) EXP EXP2)),
  (substitute (var X) EXP (times EXP1 EXP2)) => (times (substitute (var X) EXP EXP1) (substitute (var X) EXP EXP2)),
  (substitute (var X) EXP (minus EXP1 EXP2)) => (minus (substitute (var X) EXP EXP1) (substitute (var X) EXP EXP2)),
  (substitute (var X) EXP (less EXP1 EXP2)) => (less (substitute (var X) EXP EXP1) (substitute (var X) EXP EXP2)),
  (substitute (var X) EXP (le EXP1 EXP2)) => (le (substitute (var X) EXP EXP1) (substitute (var X) EXP EXP2)),
  (substitute (var X) EXP (not EXP1)) => (not (substitute (var X) EXP EXP1)),
  (substitute (var X) EXP (ite EXP1 EXP2 EXP3)) => (ite (substitute (var X) EXP EXP1) (substitute (var X) EXP EXP2) (substitute (var X) EXP EXP3)),

  (substitute (var X) EXP (assign (var Y) EXP1)) => (assign (var Y) (substitute (var X) EXP EXP1)),
  (substitute (var X) EXP (while EXP1 EXP2)) => (while (substitute (var X) EXP EXP1) (substitute (var X) EXP EXP2)),
  (substitute (var X) EXP (seq EXP1 EXP2)) => (seq (substitute (var X) EXP EXP1) (substitute (var X) EXP EXP2)),

  (substitute (var X) EXP (app EXP1 EXP2)) => (app (substitute (var X) EXP EXP1) (substitute (var X) EXP EXP2)),

  (substitute (var X) EXP1 (lam (var X) EXP)) => (lam (var X) EXP),
  (substitute (var X) EXP1 (lam (var Y) EXP)) /\ (bnot (mequals X Y)) => (lam (var Y) (substitute (var X) EXP1 EXP)),

  (substitute (var X) EXP1 (miu (var X) EXP)) => (miu (var X) EXP),
  (substitute (var X) EXP1 (miu (var Y) EXP)) /\ (bnot (mequals X Y)) => (miu (var Y) (substitute (var X) EXP1 EXP))
  ;

constrained-rewrite-system fun1

  (P (push (var X) REST) ENV) => (P (push (lookup ENV X) REST) ENV),

  (P (push (plus FNV EXP) REST) ENV) => (P (push FNV (push (plus |_| EXP) REST)) ENV),
  (P (push I (push (plus |_| EXP) REST)) ENV) => (P (push (plus I EXP) REST) ENV),
  (P (push (plus I FNV) REST) ENV) => (P (push FNV (push (plus I |_|) REST)) ENV),
  (P (push J (push (plus I |_|) REST)) ENV) => (P (push (plus I J) REST) ENV),
  (P (push (plus I J) REST) ENV) => (P (push (mplus I J) REST) ENV),

  (P (push (times FNV EXP) REST) ENV) => (P (push FNV (push (times |_| EXP) REST)) ENV),
  (P (push I (push (times |_| EXP) REST)) ENV) => (P (push (times I EXP) REST) ENV),
  (P (push (times I FNV) REST) ENV) => (P (push FNV (push (times I |_|) REST)) ENV),
  (P (push J (push (times I |_|) REST)) ENV) => (P (push (times I J) REST) ENV),
  (P (push (times I J) REST) ENV) => (P (push (mtimes I J) REST) ENV),

  (P (push (minus FNV EXP) REST) ENV) => (P (push FNV (push (minus |_| EXP) REST)) ENV),
  (P (push I (push (minus |_| EXP) REST)) ENV) => (P (push (minus I EXP) REST) ENV),
  (P (push (minus I FNV) REST) ENV) => (P (push FNV (push (minus I |_|) REST)) ENV),
  (P (push J (push (minus I |_|) REST)) ENV) => (P (push (minus I J) REST) ENV),
  (P (push (minus I J) REST) ENV) => (P (push (mminus I J) REST) ENV),

  (P (push (less FNV EXP) REST) ENV) => (P (push FNV (push (less |_| EXP) REST)) ENV),
  (P (push I (push (less |_| EXP) REST)) ENV) => (P (push (less I EXP) REST) ENV),
  (P (push (less I FNV) REST) ENV) => (P (push FNV (push (less I |_|) REST)) ENV),
  (P (push J (push (less I |_|) REST)) ENV) => (P (push (less I J) REST) ENV),
  (P (push (less I J) REST) ENV) => (P (push (mless I J) REST) ENV),

  (P (push (le FNV EXP) REST) ENV) => (P (push FNV (push (le |_| EXP) REST)) ENV),
  (P (push I (push (le |_| EXP) REST)) ENV) => (P (push (le I EXP) REST) ENV),
  (P (push (le I FNV) REST) ENV) => (P (push FNV (push (le I |_|) REST)) ENV),
  (P (push J (push (le I |_|) REST)) ENV) => (P (push (le I J) REST) ENV),
  (P (push (le I J) REST) ENV) => (P (push (mle I J) REST) ENV),

  (P (push (not B) REST) ENV) => (P (push (bnot B) REST) ENV),
  (P (push (not FNV) REST) ENV) => (P (push FNV (push (not |_|) REST)) ENV),
  (P (push B (push (not |_|) REST)) ENV) => (P (push (not B) REST) ENV),

  (P (push (ite FNV EXP1 EXP2) REST) ENV) => (P (push FNV (push (ite |_| EXP1 EXP2) REST)) ENV),
  (P (push B (push (ite |_| EXP1 EXP2) REST)) ENV) => (P (push (ite B EXP1 EXP2) REST) ENV),
  (P (push (ite true EXP1 EXP2) REST) ENV) => (P (push EXP1 REST) ENV),
  (P (push (ite false EXP1 EXP2) REST) ENV) => (P (push EXP2 REST) ENV),

  (P (push (assign (var X) I) REST) ENV) => (P (push I REST) (update ENV X I)),
  (P (push (assign (var X) FNV) REST) ENV) => (P (push FNV (push (assign (var X) |_|) REST)) ENV),
  (P (push I (push (assign (var X) |_|) REST)) ENV) => (P (push (assign (var X) I) REST) ENV),

  (P (push (seq VF EXP2) REST) ENV) => (P (push EXP2 REST) ENV),
  (P (push (seq FNV EXP2) REST) ENV) => (P (push FNV (push (seq |_| EXP2) REST)) ENV),
  (P (push VF (push (seq |_| EXP2) REST)) ENV) => (P (push (seq VF EXP2) REST) ENV),

  (P (push (while EXP1 EXP2) REST) ENV) => (P (push (ite EXP1 (seq EXP2 (while EXP1 EXP2)) skip) REST) ENV),
  (P (push skip REST) ENV) => (P (push 0 REST) ENV),

  (P (push (app FNV EXP) REST) ENV) => (P (push FNV (push (app |_| EXP) REST)) ENV),
  (P (push (lam (var X) EXP1) (push (app |_| EXP) REST)) ENV) => (P (push (app (lam (var X) EXP1) EXP) REST) ENV),
  (P (push (app (lam (var X) EXP1) FNV) REST) ENV) => (P (push FNV (push (app (lam (var X) EXP1) |_|) REST)) ENV),
  (P (push VF (push (app (lam (var X) EXP1) |_|) REST)) ENV) => (P (push (app (lam (var X) EXP1) VF) REST) ENV),
  (P (push (app (lam (var X) EXP1) VF) REST) ENV) => (P (push (substitute (var X) VF EXP1) REST) ENV),

  (P (push (miu (var X) EXP) REST) ENV) => (P (push (substitute (var X) (miu (var X) EXP) EXP) REST) ENV)
;

define reduce : Int Int Stack -> Stack by
  (reduce I N REST) /\ (mgt I N) => REST,
  (reduce I N REST) /\ (mle I N) => (push (plus I |_|) (reduce (mplus I 1) N REST))
;


//TOTAL SIMULATION : DOES NOT WORK TO SHOW fa < f
show-simulation [200, total] in fun1 and fun1 :

(pair

  (P (push 
  (app (app (app
    (miu (var 3)
      (lam (var 0) (lam (var 1) (lam (var 2)
      (ite (le (var 1) (var 0))
        (app (app (app (var 3) (var 0)) (plus (var 1) 1)) (plus (var 2) (var 1)))
        (var 2)
        )))))
    N) 0) 0)
 done) ENV2)

  (P (push 
    (app
      (miu (var 3)
        (lam (var 0)
        (ite (le 0 (var 0))
          (plus (var 0)
            (app (var 3) (minus (var 0) 1)))
          0
          )))
      N)
  done) ENV1)
) /\ (band (mle 0 N)
    true
    //(mle N 1)
    )

,


(pair

  (P (push 
  (app (app (app
    (miu (var 3)
      (lam (var 0) (lam (var 1) (lam (var 2)
      (ite (le (var 1) (var 0))
        (app (app (app (var 3) (var 0)) (plus (var 1) 1)) (plus (var 2) (var 1)))
        (var 2)
        )))))
    N) (plus (mminus I 1) 1)) (plus (mminus S X) X))
  done) ENV2)

  (P (push S (reduce I N done)) ENV1)

)  /\ (band
          (band (mle 0 N)
            true
            //(mle N 2)
            )
          (band (mle I N) (mle 1 I)))

,


(pair

  (P (push 
  (app (app (app
    (miu (var 3)
      (lam (var 0) (lam (var 1) (lam (var 2)
      (ite (le (var 1) (var 0))
        (app (app (app (var 3) (var 0)) (plus (var 1) 1)) (plus (var 2) (var 1)))
        (var 2)
        )))))
    N) 0) 0)
 done) ENV2)

  (P (push 
    (app
      (miu (var 3)
        (lam (var 0)
        (ite (le 0 (var 0))
          (plus (var 0)
            (app (var 3) (minus (var 0) 1)))
          0
          )))
      (minus I 1))
  (reduce I N done)) ENV1)
)
/\ (band
  (band (mle 0 N)
    true
    //(mle N 2)
    )
  (band (mle I N) (mle 0 I)))


with-base
    (pair (P (push SUM done) ENV1) (P (push SUM done) ENV2))
;

