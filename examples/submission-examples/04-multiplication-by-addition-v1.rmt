/*
 
This example illustrates a rewrite system that computes the
multiplication two natural numbers by repeated addition.

Run the example with

./rmt -v 0 < 04-multiplication-by-addition.rmt

The expected output is for the proof to go through.

*/
sorts Int / "Int", Bool / "Bool", State;
// subsort Int < State;

signature mzero : -> Int / "0", mone : -> Int / "1", mtwo : -> Int / "2", mthree : -> Int / "3",
  mplus : Int Int->Int / "+", mminus : Int Int->Int / "-",
  mtimes : Int Int->Int / "*", mdiv : Int Int->Int / "div",
  mle : Int Int->Bool / "<=", mequals : Int Int->Bool / "=",
  mgcd : Int Int -> Int / "gcd", mg : Int Int -> Bool / ">",
  mmod : Int Int -> Int / "mod",

  bequals : Bool Bool->Bool / "=", band : Bool Bool->Bool / "and",
  bimplies : Bool Bool->Bool / "=>", bor : Bool Bool->Bool / "or",
  bnot : Bool->Bool / "not", true : ->Bool / "true", false : ->Bool / "false",

  init : Int Int -> State, loop : Int Int Int -> State, done : Int -> State,
  ok : Int Int -> State;

variables S : Int, N : Int, I : Int, J : Int, X : Int, Y : Int, Z : Int, A : Int, B : Int,
 C : Int, D : Int, BB : Bool;

rewrite-system simplifications
  bnot(false) => true, bnot(true) => false, bnot(bnot(BB)) => BB,
  band(false, BB) => false, band(true, BB) => BB, band(BB, false) => false,
  band(BB, true) => BB, bimplies(true, BB) => BB, bimplies(false, BB) => true,
  bor(false, BB) => BB, bor(true, BB) => true, bor(BB, false) => BB,
  bor(BB, true) => true, mequals(N, N) => true, bequals(BB, BB) => true,
  bequals(true, BB) => BB,bequals(false, BB) => bnot(BB), bequals(BB, true) => BB,
  bequals(BB, false) => bnot(BB), band(BB, BB) => BB, bor(BB, BB) => BB;

constrained-rewrite-system multbyadd
  init(X, Y) => loop(mzero, X, Y),

  loop(S, X, Y) /\ mle(mone, Y) =>
  loop(mplus(S, X), X, mminus(Y, mone)),

  loop(S, X, Y) /\ bnot(mle(mone, Y)) =>
  done(S);

constrained-rewrite-system circ
  init(X, Y) /\ mle(mzero, Y) => done(mtimes(X, Y)),
  loop(S, X, Y) /\ mle(mzero, Y) => done(mplus(S, mtimes(X, Y)));

prove [5,2] in multbyadd : circ;
