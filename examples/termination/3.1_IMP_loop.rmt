/*

This example describes the imperative programming language IMP
presented in the paper submission and a simple program which loops
forever:

while 0 <= 0 do
    skip;

The prove command for partial correctness suceeeds, as expected.

The prove command for total correctness fails, as expected (for any variant).

Note that this example will take a lot of time (> 10 minutes).
       
*/
smt-prelude
"(declare-fun uifun (Int Int) Int)
 (declare-datatypes () ((Id idX idY idZ idC1 idC2 idV1 idV2)))
 (define-fun sumUpTo ((n Int)) Int
    (div (* n (+ n 1)) 2)
 )
 (define-fun even ((n Int)) Bool
    (= (mod n 2) 0)
 )
 (define-fun sum ((a Int) (b Int)) Int
   (- (sumUpTo b) (sumUpTo (- a 1))))
 (declare-const emptydict (Array Id Int))
; (assert (= emptydict ((as const (Array Id Int)) 0)))
"

sorts Dict / "(Array Id Int)",
      Id / "Id",
      AExp,
      BExp,
      Stmt,
      Code,
      List,
      Cfg,
      nCfg
    ;

/* next we must declare all function symbols */
signature
	// integers
	mconst : -> Int / "200", /* constant for variant in TC transformation */

	// identifiers
	x : -> Id / "idX",
	y : -> Id / "idY",
	z : -> Id / "idZ",

	idequals : Id Id -> Bool / "=",

	// dictionaries
	emptydict : -> Dict / "emptydict",
	update : Dict Id Int -> Dict / "store",
	lookup  : Dict Id -> Int / "select",
	dictequals : Dict Dict -> Bool / "=",

	// constructors for arithmetic expressions
	i : Int -> AExp,

	id : Id -> AExp,

	plus : AExp AExp -> AExp,
	plushl : AExp -> AExp,
    	plushr : AExp -> AExp,

	isIntVal : AExp -> Bool / defined, // determines whether an arithmetic expression is a value

	lifta : AExp -> Code,
	
	// constructors for boolean expressions
	b : Bool -> BExp,

	aequals : AExp AExp -> BExp,
	aequalshl : AExp -> BExp,
	aequalshr : AExp -> BExp,

	lte   : AExp AExp -> BExp,
    	ltehl : AExp -> BExp,
    	ltehr : AExp -> BExp,

	lt   : AExp AExp -> BExp,
    	lthl : AExp -> BExp,
    	lthr : AExp -> BExp,

	not : BExp -> BExp,
	noth : -> BExp,

	isBoolVal : BExp -> Bool / defined, // function to determine whether a boolean expression is a value

	liftb : BExp -> Code,

	// statements
	assign : Id AExp -> Stmt,
    	assignh : Id -> Stmt,

	skip : -> Stmt,

	seq : Stmt Stmt -> Stmt,

	ite : BExp Stmt Stmt -> Stmt,
	iteh : Stmt Stmt -> Stmt,

	while : BExp Stmt -> Stmt,

	lifts : Stmt -> Code,

	// computation stack
	done : -> List,
	push : Code List -> List,

	// configuration
	IC : List Dict -> Cfg,

	//protect function (for total correctness)
	protect : Cfg Int -> nCfg;

/* next we must declare all variables */
variables
	X : Id,
	Y : Id,
	Z : Id,

	N : Int,
	SUM : Int,
	I : Int,
	J : Int,
	M : Int,

	B : Bool,
	BE : BExp,
	BE1 : BExp,
	BE2 : BExp,
	
	AE : AExp,
	AE1 : AExp,
	AE2 : AExp,
	
	S : Stmt,
	S1 : Stmt,
	S2 : Stmt,
	S3 : Stmt,
	S4 : Stmt,
	
	REST : List,
	
	ENV : Dict,
	ENVP : Dict,
	ENV1 : Dict,
	ENV2 : Dict,
	ENW  : Dict,

	M_1 : Int, M_2 : Int;

rewrite-system functions
  (isBoolVal (b B)) => true,
  
  (isBoolVal (aequals AE1 AE2)) => false,
  (isBoolVal (aequalshl AE1)) => false,
  (isBoolVal (aequalshr AE1)) => false,

  (isBoolVal (lte AE1 AE2)) => false,
  (isBoolVal (ltehl AE1)) => false,
  (isBoolVal (ltehr AE1)) => false,

  (isBoolVal (lt AE1 AE2)) => false,
  (isBoolVal (lthl AE1)) => false,
  (isBoolVal (lthr AE1)) => false,

  (isBoolVal (not BE1)) => false,
  (isBoolVal noth) => false,

  (isIntVal (i I)) => true,

  (isIntVal (id X)) => false,

  (isIntVal (plus AE1 AE2)) => false,
  (isIntVal (plushl AE1)) => false,
  (isIntVal (plushr AE1)) => false
;

/* next declare all rewrite rules */
constrained-rewrite-system language
        /* statements: assignment statement */
	(IC (push (lifts (assign X (i N))) REST) ENV) =>
        (IC REST                               (update ENV X N)),
    
 	(IC (push (lifts (assign X AE))       REST)  ENV) /\ (bnot (isIntVal AE)) =>
 	(IC (push (lifta AE) (push (lifts (assignh X)) REST)) ENV),

     	(IC (push (lifta (i N)) (push (lifts (assignh X)) REST)) ENV) =>
     	(IC (push (lifts (assign X (i N)))        REST)  ENV),

	/* statements: sequential composition */
	(IC (push (lifts (seq S1 S2)) REST)  ENV) =>
	(IC (push (lifts S1) (push (lifts S2) REST)) ENV),

	(IC (push (lifts skip) REST) ENV) =>
	(IC                   REST  ENV),

	/* statements: conditional statement */
	(IC (push (lifts (ite BE S1 S2))              REST)  ENV) /\ (bnot (isBoolVal BE)) =>
	(IC (push (liftb BE) (push (lifts (iteh S1 S2)) REST)) ENV),

	(IC (push (liftb (b B)) (push (lifts (iteh S1 S2)) REST)) ENV) =>
	(IC (push (lifts (ite (b B) S1 S2))              REST)  ENV),

	(IC (push (lifts (ite (b B) S1 S2)) REST) ENV) /\ B =>
	(IC (push (lifts S1)                   REST) ENV),

 	(IC (push (lifts (ite (b B) S1 S2)) REST) ENV) /\ (bnot B) =>
 	(IC (push (lifts S2)                    REST) ENV),

	/* statements: while statement */
 	(IC (push (lifts (while BE S))                        REST) ENV) =>
 	(IC (push (lifts (ite BE (seq S (while BE S)) skip)) REST) ENV),

	/* arithmetic expressions: identifier lookup in environment */
	(IC (push (lifta (id X))             REST) ENV) =>
 	(IC (push (lifta (i (lookup ENV X))) REST) ENV),

	/* arithmetic expressions: sum */
 	(IC (push (lifta (plus (i N) (i M)))     REST) ENV) =>
 	(IC (push (lifta (i (mplus N M)))       REST) ENV),

	(IC (push (lifta (plus AE1 AE2))        REST)  ENV) /\ (bnot (isIntVal AE1)) =>
	(IC (push (lifta AE1) (push (lifta (plushl AE2)) REST)) ENV),
  
 	(IC (push (lifta (i N)) (push (lifta (plushl AE2)) REST)) ENV) =>
 	(IC (push (lifta (plus (i N) AE2))               REST)  ENV),

 	(IC (push (lifta (plus (i N) AE2))               REST)  ENV) /\ (bnot (isIntVal AE2)) =>
 	(IC (push (lifta AE2) (push (lifta (plushr (i N))) REST)) ENV),

 	(IC (push (lifta (i M)) (push (lifta (plushr (i N))) REST)) ENV) =>
 	(IC (push (lifta (plus (i N) (i M)))               REST)  ENV),

	/* boolean expressions: equality */
 	(IC (push (liftb (aequals (i N) (i M)))  REST) ENV) =>
 	(IC (push (liftb (mequals N M))        REST) ENV),

 	(IC (push (liftb (aequals AE1 AE2))        REST)  ENV) /\ (bnot (isIntVal AE1)) =>
 	(IC (push (lifta AE1) (push (liftb (aequalshl AE2)) REST)) ENV),

 	(IC (push (lifta (i N)) (push (liftb (aequalshl AE2)) REST)) ENV) =>
 	(IC (push (liftb (aequals (i N) AE2))        REST)  ENV),

 	(IC (push (liftb (aequals (i N) AE2))        REST)  ENV) /\ (bnot (isIntVal AE1)) =>
 	(IC (push (lifta AE2) (push (liftb (aequalshr (i N))) REST)) ENV),
  
 	(IC (push (lifta (i M)) (push (liftb (aequalshr (i N))) REST)) ENV) =>
 	(IC (push (liftb (aequals (i N) (i M)))        REST)  ENV),

	/* boolean expressions: negation */
	(IC (push (liftb (not (b B)))  REST) ENV) =>
	(IC (push (liftb (b (bnot B))) REST) ENV),

	(IC (push (liftb (not BE))       REST)  ENV) /\ (bnot (isBoolVal BE)) =>
	(IC (push (liftb BE) (push (liftb noth) REST)) ENV),

	(IC (push (liftb (b B)) (push (liftb noth) REST)) ENV) =>
	(IC (push (liftb (not (b B)))       REST)  ENV),

	/* boolean expressions: less than or equal to (lte) */
 	(IC (push (liftb (lte (i N) (i M)))  REST) ENV) =>
 	(IC (push (liftb (b (mle N M)))    REST) ENV),

 	(IC (push (liftb (lte AE1 AE2))        REST)  ENV) /\ (bnot (isIntVal AE1)) =>
 	(IC (push (lifta AE1) (push (liftb (ltehl AE2)) REST)) ENV),

 	(IC (push (lifta (i N)) (push (liftb (ltehl AE2)) REST)) ENV) =>
 	(IC (push (liftb (lte (i N) AE2))        REST)  ENV),

 	(IC (push (liftb (lte (i N) AE2))        REST)  ENV) /\ (bnot (isIntVal AE2)) =>
 	(IC (push (lifta AE2) (push (liftb (ltehr (i N))) REST)) ENV),
  
 	(IC (push (lifta (i M)) (push (liftb (ltehr (i N))) REST)) ENV) =>
 	(IC (push (liftb (lte (i N) (i M)))        REST)  ENV),

	// strictly less than
 	(IC (push (liftb (lt (i N) (i M)))  REST) ENV) =>
 	(IC (push (liftb (b (mless N M)))    REST) ENV),

 	(IC (push (liftb (lt AE1 AE2))               REST)  ENV) /\ (bnot (isIntVal AE1)) =>
 	(IC (push (lifta AE1) (push (liftb (lthl AE2)) REST)) ENV),

 	(IC (push (lifta (i N)) (push (liftb (lthl AE2)) REST)) ENV) =>
 	(IC (push (liftb (lt (i N) AE2))               REST)  ENV),

 	(IC (push (liftb (lt (i N) AE2))        REST)  ENV) /\ (bnot (isIntVal AE2)) =>

 	(IC (push (lifta AE2) (push (liftb (lthr (i N))) REST)) ENV),
  
 	(IC (push (lifta (i M)) (push (liftb (lthr (i N))) REST)) ENV) =>
 	(IC (push (liftb (lt (i N) (i M)))        REST)  ENV)
;

constrained-rewrite-system circularities
(IC 
	(push 
		(lifts (while (lte (i 0) (i 0))
		        skip))
		REST)
        ENV)
=>
(IC 
	REST
	ENW)
;


/* command for proof of partial correctness; this succeeds */
prove [300,5] in language : circularities;

/* series of commands for proving total corretness; this also succeeds */
instrument language lang_protected Cfg nCfg protect;

cinstrument circularities circularities_protected Cfg nCfg protect mconst;

prove [300,5] in lang_protected : circularities_protected;
