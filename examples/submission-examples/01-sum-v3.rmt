/*

This is an example accompanying the RMT paper submission.

The example proves the formal correctness of a rewrite system
computing 1 + 2 + ... + N.

The example comes as 5 files and this is the third one.

We have a rewrite system that computes the sum of the first N positive
natural numbers.

We illustrate here how to compute the successors (up to a certain
depth) of a given constrained term.

Run this example with

./rmt -v 0 < 01-sum-v3.rmt

The output should be:

4 solutions.
Solution #1:
loop(mplus(S,N),mminus(N,mone)) if mle(mone,N)
Solution #2:
loop(mplus(mplus(S,N),mminus(N,mone)),mminus(mminus(N,mone),mone)) if band(mle(mone,N),mle(mone,mminus(N,mone)))
Solution #3:
done(mplus(S,N)) if band(mle(mone,N),bnot(mle(mone,mminus(N,mone))))
Solution #4:
done(S) if bnot(mle(mone,N))

This example is identical to 01-example-sum-v3.rmt and
01-example-sum-v4.rmt, but with a different query. The example
illustrates the optional arguments to the "search" query.

*/

sorts Int/"Int", Bool/"Bool", State;
// subsort Int < State;

signature mzero:->Int/"0", mone:->Int/"1", mtwo:->Int/"2",
  mplus:Int Int->Int/"+", mminus:Int Int->Int/"-",
  mtimes:Int Int->Int/"*", mdiv:Int Int->Int/"div",
  mle:Int Int->Bool/"<=", mequals:Int Int->Bool/"=",

  bequals:Bool Bool->Bool/"=", band:Bool Bool->Bool/"and",
  bimplies:Bool Bool->Bool/"=>", bor:Bool Bool->Bool/"or",
  bnot:Bool->Bool/"not", true:->Bool/"true", false:->Bool/"false",

  init:Int->State, loop:Int Int->State, done:Int->State;

variables B:Bool, S:Int, N:Int, I:Int;

rewrite-system simplifications
  bnot(false)=>true, bnot(true)=>false, bnot(bnot(B))=>B,
  band(false, B)=>false, band(true, B)=>B, band(B, false)=>false,
  band(B, true)=>B, bimplies(true, B)=>B, bimplies(false, B)=>true,
  bor(false, B)=>B, bor(true, B)=>true, bor(B, false)=>B,
  bor(B, true)=>true, mequals(N, N)=>true, bequals(B, B)=>true,
  bequals(true, B)=>B,bequals(false, B)=>bnot(B), bequals(B, true)=>B,
  bequals(B, false)=>bnot(B), band(B, B)=>B, bor(B, B)=>B;

constrained-rewrite-system sum
  init(N) => loop(mzero, N),
  loop(S, N) /\ mle(mone, N) => loop(mplus(S, N), mminus(N, mone)),
  loop(S, N) /\ bnot(mle(mone, N)) => done(S);

/*
This example illustrates a search of terms reachable from loop(S, N)
in any number of steps between 1 and 2. This will yield four
solutions, depending on which rules apply.

Please go ahead and experiment with various parameters. Try the
following queries:

search [0,0] in sum : loop(S, N);
search [0,3] in sum : loop(S, N);
search [3,3] in sum : loop(S, N);

You can also specify an initial constraint. Try the following query:

search [1,1] in sum : loop(S, N) /\ mle(mone, N);
*/
search [1,2] in sum :
  loop(S, N);
