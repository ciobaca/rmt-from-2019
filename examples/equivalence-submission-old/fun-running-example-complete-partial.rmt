/*
*/

sorts IntP,
      BoolP,
      Var,
      AExp,
      BExp,
      NonValAExp,
      NonValBExp,
      Stmt,
      Code,
      CompStack,
      Map / "(Array Int Int)",
      CfgI,
      State,
      
      VarF,
      ExpF,
      NonValExpF,
      ValExpF,
      CfgF
    ;

builtins sum : Int Int -> Int, sumUpTo : Int -> Int, muifun : Int Int -> Int, iS1 : Int Int Int Int -> Int, iE1 : Int Int -> Int;

// after declaring all sorts,
// we must declare all subsort relations
subsort Int < IntP;
subsort IntP < AExp;
subsort Var < NonValAExp;
subsort NonValAExp < AExp;
subsort NonValBExp < BExp;
subsort AExp BExp Stmt < Code;
subsort Bool < BoolP;
subsort BoolP < BExp;
subsort AExp < Stmt;
subsort BExp < Stmt;

subsort Bool < ValExpF;
subsort Int < ValExpF;
subsort VarF < ExpF;
subsort ValExpF < ExpF;
subsort NonValExpF < ExpF;


/* next we must declare all function symbols */
signature
	pair : CfgI CfgF -> State,

	mapequals : Map Map -> Bool / "=",

	vfequals : VarF VarF -> Bool / "=",

	var : Int -> Var,
	fvar : Int -> VarF,

	// functional language
	miu : VarF ExpF -> NonValExpF,
	lam : VarF ExpF -> ValExpF,

	fplus : ExpF ExpF -> NonValExpF,
	fplushl : ExpF -> NonValExpF,
	fplushr : ExpF -> NonValExpF,
	fminus : ExpF ExpF -> NonValExpF,
	fminushl : ExpF -> NonValExpF,
	fminushr : ExpF -> NonValExpF,
	fle : ExpF ExpF -> NonValExpF,
	flehl : ExpF -> NonValExpF,
	flehr : ExpF -> NonValExpF,
	fless : ExpF ExpF -> NonValExpF,
	flesshl : ExpF -> NonValExpF,
	flesshr : ExpF -> NonValExpF,
	fite : ExpF ExpF ExpF -> NonValExpF,
	fiteh : ExpF ExpF -> NonValExpF,
//	flet : Var ExpF ExpF -> NonValExpF,

	app : ExpF ExpF -> NonValExpF,
	apphl : ExpF -> NonValExpF,
	apphr : ExpF -> NonValExpF,

	F : ExpF -> CfgF,

	contextexp : ExpF -> ExpF,
//	contextexp : ValExpF -> ValExpF,
//	contextexp : NonValExpF -> NonValExpF,
	
	pS1 : -> Stmt,
	pE1 : -> NonValAExp,

	// helper functions
	synEq : Var Var -> Bool / "=",

	update : Map Int Int -> Map / "store",
	lookup  : Map Int -> Int / "select",

	// arithmetic and boolean expressions
	plus : AExp AExp -> NonValAExp,
	plushl : AExp -> AExp,
    	plushr : AExp -> AExp,

	// uninterpreted function
	uifun : AExp AExp -> NonValAExp,
	uifunhl : AExp -> AExp,
	uifunhr : AExp -> AExp,

	minus : AExp AExp -> NonValAExp,
	minushl : AExp -> AExp,
    	minushr : AExp -> AExp,

	pred : AExp -> NonValAExp,
	predh : -> Stmt,

	succ : AExp -> NonValAExp,
	succh : -> Stmt,

	le   : AExp AExp -> NonValBExp,
    	lehl : AExp -> BExp,
    	lehr : AExp -> BExp,

	less   : AExp AExp -> NonValBExp,
    	lesshl : AExp -> BExp,
    	lesshr : AExp -> BExp,

	not : BExp -> NonValBExp,
	noth : -> Stmt,

	// computation stack
	done : -> CompStack,
	push : AExp CompStack -> CompStack,

	// configuration
	IC : CompStack Map -> CfgI,

	// statements
	assign : Var AExp -> Stmt,
    	assignh : Var -> Stmt,

	skip : -> Stmt,

	seq : Stmt Stmt -> Stmt,

	ite : BExp Stmt Stmt -> Stmt,
	iteh : Stmt Stmt -> Stmt,

	while : BExp Stmt -> Stmt,

	for : Var AExp AExp Stmt -> Stmt,
	forhl : Var AExp Stmt -> Stmt,
	forhr : Var AExp Stmt -> Stmt;

/* next we must declare all variables */
variables
	// necessary variables
	X : Int,
	Y : Int,
	Z : Int,

	N : Int,
	SUM : Int,
	I : Int,
	J : Int,
	M : Int,
	PRIMM : Int,
	PRIMMP : Int,
	PRIMN : Int,
 	PRIMENV : Map,
 	PRIMENVP : Map,
	MP : Int,

	B : Bool,
	BE : BExp,
	BE1 : BExp,
	BE2 : BExp,
	AE : AExp,
	AE1 : AExp,
	AE2 : AExp,
	NVAE : NonValAExp,
	NVAE1 : NonValAExp,
	NVAE2 : NonValAExp,
	NVBE : NonValBExp,
	NVBE1 : NonValBExp,
	NVBE2 : NonValBExp,
	S : Stmt,
	S1 : Stmt,
	S2 : Stmt,
	S3 : Stmt,
	S4 : Stmt,
	REST : CompStack,
	ENV : Map,
	ENVP : Map,
	ENV1 : Map,
	ENV2 : Map,

	FEXP : ExpF,
	FEXP1 : ExpF,
	FEXP2 : ExpF,
	FEXP3 : ExpF,
	FNV : NonValExpF,
	VF : ValExpF;


assert (_forallInt N
         (mequals (sumUpTo N) (mdiv (mtimes N (mplus N 1)) 2)));

assert (_forallInt X (_forallInt Y
         (mequals (sum X Y) (mminus (sumUpTo Y) (sumUpTo (mminus X 1))))));


define substitute : VarF ExpF ExpF -> ExpF by
  (substitute (fvar X) FEXP I) => I,
  (substitute (fvar X) FEXP B) => B,
  (substitute (fvar X) FEXP (fvar X)) => FEXP,
  (substitute (fvar X) FEXP (fvar Y)) /\ (bnot (mequals X Y)) => (fvar Y),

  (substitute (fvar X) FEXP (fplus FEXP1 FEXP2)) => (fplus (substitute (fvar X) FEXP FEXP1) (substitute (fvar X) FEXP FEXP2)),
  (substitute (fvar X) FEXP (fminus FEXP1 FEXP2)) => (fminus (substitute (fvar X) FEXP FEXP1) (substitute (fvar X) FEXP FEXP2)),
  (substitute (fvar X) FEXP (fless FEXP1 FEXP2)) => (fless (substitute (fvar X) FEXP FEXP1) (substitute (fvar X) FEXP FEXP2)),
  (substitute (fvar X) FEXP (fle FEXP1 FEXP2)) => (fle (substitute (fvar X) FEXP FEXP1) (substitute (fvar X) FEXP FEXP2)),
  (substitute (fvar X) FEXP (fite FEXP1 FEXP2 FEXP3)) => (fite (substitute (fvar X) FEXP FEXP1) (substitute (fvar X) FEXP FEXP2) (substitute (fvar X) FEXP FEXP3)),

  (substitute (fvar X) FEXP (app FEXP1 FEXP2)) => (app (substitute (fvar X) FEXP FEXP1) (substitute (fvar X) FEXP FEXP2)),

  (substitute (fvar X) FEXP1 (lam (fvar X) FEXP)) => (lam (fvar X) FEXP),
  (substitute (fvar X) FEXP1 (lam (fvar Y) FEXP)) /\ (bnot (mequals X Y)) => (lam (fvar Y) (substitute (fvar X) FEXP1 FEXP)),

  (substitute (fvar X) FEXP1 (miu (fvar X) FEXP)) => (miu (fvar X) FEXP),
  (substitute (fvar X) FEXP1 (miu (fvar Y) FEXP)) /\ (bnot (mequals X Y)) => (miu (fvar Y) (substitute (fvar X) FEXP1 FEXP))
  ;  


constrained-rewrite-system flanguage

// TODO: de mers cu stil stiva
// (cons (fplus FNV FEXP) LIST) => (cons FNV (cons (fplus HOLE FEXP) LIST))...

	(F (push (fplus FNV FEXP) REST)) => (F (push FNV (push (fplushl FEXP) REST))),
	(F (push I (push (fplushl FEXP) REST))) => (F (push (fplus I FEXP) REST)),
	(F (push (fplus I FNV) REST)) => (F (push FNV (push (fplushr I) REST))),
	(F (push J (push (fplushr I) REST))) => (F (push (fplus I J) REST)),
	(F (push (fplus I J) REST)) => (F (push (mplus I J) REST)),

	(F (push (fminus FNV FEXP) REST)) => (F (push FNV (push (fminushl FEXP) REST))),
	(F (push I (push (fminushl FEXP) REST))) => (F (push (fminus I FEXP) REST)),
	(F (push (fminus I FNV) REST)) => (F (push FNV (push (fminushr I) REST))),
	(F (push J (push (fminushr I) REST))) => (F (push (fminus I J) REST)),
	(F (push (fminus I J) REST)) => (F (push (mminus I J) REST)),

	(F (push (fless FNV FEXP) REST)) => (F (push FNV (push (flesshl FEXP) REST))),
	(F (push I (push (flesshl FEXP) REST))) => (F (push (fless I FEXP) REST)),
	(F (push (fless I FNV) REST)) => (F (push FNV (push (flesshr I) REST))),
	(F (push J (push (flesshr I) REST))) => (F (push (fless I J) REST)),
	(F (push (fless I J) REST)) => (F (push (mless I J) REST)),

	(F (push (fle FNV FEXP) REST)) => (F (push FNV (push (flehl FEXP) REST))),
	(F (push I (push (flehl FEXP) REST))) => (F (push (fle I FEXP) REST)),
	(F (push (fle I FNV) REST)) => (F (push FNV (push (flehr I) REST))),
	(F (push J (push (flehr I) REST))) => (F (push (fle I J) REST)),
	(F (push (fle I J) REST)) => (F (push (mle I J) REST)),

	(F (push (fite FNV FEXP1 FEXP2) REST)) => (F (push FNV (push (fiteh FEXP1 FEXP2) REST))),
	(F (push B (push (fiteh FEXP1 FEXP2) REST))) => (F (push (fite B FEXP1 FEXP2) REST)),
	//(F (push (fite B FNV FEXP2) REST)) => (F (push FNV (push (fitehl B FEXP2) REST))),
	//(F (push I (push (fitehl B FEXP2) REST))) => (F (push (fite B I FEXP2) REST)),
	//(F (push (fite B I FNV) REST)) => (F (push FNV (push (fitehr B I) REST))),
	//(F (push FNV (push (fitehr B I) REST))) => (F (push (fite B I J) REST)),
	(F (push (fite true FEXP1 FEXP2) REST)) => (F (push FEXP1 REST)),
	(F (push (fite false FEXP1 FEXP2) REST)) => (F (push FEXP2 REST)),

	(F (push (app FNV FEXP) REST)) => (F (push FNV (push (apphl FEXP) REST))),
	(F (push (lam (fvar X) FEXP1) (push (apphl FEXP) REST))) => (F (push (app (lam (fvar X) FEXP1) FEXP) REST)),
	(F (push (app (lam (fvar X) FEXP1) FNV) REST)) => (F (push FNV (push (apphr (lam (fvar X) FEXP1)) REST))),
	(F (push VF (push (apphr (lam (fvar X) FEXP1)) REST))) => (F (push (app (lam (fvar X) FEXP1) VF) REST)),
	(F (push (app (lam (fvar X) FEXP1) VF) REST)) => (F (push (substitute (fvar X) VF FEXP1) REST)),

	(F (push (miu (fvar X) FEXP) REST)) => (F (push (substitute (fvar X) (miu (fvar X) FEXP) FEXP) REST))
;

//definedsearch [1,20] (F (app (contextexp (substitute (fvar 0) 2 (lam (fvar 1) (fplus (fvar 0) (fvar 1))))) 1));


// rundefined in flanguage :

// (F (push 
// 	(app
// 		(miu (fvar 1)
// 			(lam (fvar 0)
// 			(fite (fle 0 (fvar 0))
// 				(fplus (fvar 0)
// 					(app (fvar 1) (fminus (fvar 0) 1)))
// 				0
// 				)))
// 		5)
//  done))
// ;

// !EOF!

// rundefined in flanguage :

// (F (push 
// 	(app (app (app
// 		(miu (fvar 3)
// 			(lam (fvar 0) (lam (fvar 1) (lam (fvar 2)
// 			(fite (fle (fvar 1) (fvar 0))
// 				(app (app (app (fvar 3) (fvar 0)) (fplus (fvar 1) 1)) (fplus (fvar 2) (fvar 1)))
// 				//(fplus (fvar 0)
// 				//	(app (fvar 1) (fminus (fvar 0) 1)))
// 				(fvar 2)
// 				)))))
// 		5) 0) 0)
//  done))
// ;

// !EOF!

show-simulation [200, total] in flanguage and flanguage :
   (pair

(F (push 
		(fplus 2 3)
 	done))

(F (push 
	(fplus (app (miu (fvar 3) (lam (fvar 2) (fite (fle 5 3) (app (fvar 3) 0) (fplus (fvar 2) 1)))) 2) 2)
 done))

	// (F (push (app (app (
	// miu (fvar 2) (
	// 	lam (fvar 0) (lam (fvar 1) // TODO: trei parametri aici
	// 		(fite (fle 0 (fvar 0))
	// 			(app (app (fvar 2) (fminus (fvar 0) 1)) (fplus (fvar 1) (fvar 0)))
	// 			(fvar 1)
	// 		)
	// 	))
	// ) N ) I ) done))


	)
 with-base
     (pair (F (push SUM done)) (F (push SUM done)));

!EOF!

show-simulation [200, total] in flanguage and flanguage :
   (pair

(F (push 
		(app
			(miu (fvar 3)
				(lam (fvar 0)
				(fite (fle 0 (fvar 0))
					(fplus (fvar 0)
						(app (fvar 3) (fminus (fvar 0) 1)))
					0
					)))
			1)
 	done))

(F (push 
	(app (app (app
		(miu (fvar 3)
			(lam (fvar 0) (lam (fvar 1) (lam (fvar 2)
			(fite (fle (fvar 1) (fvar 0))
				(app (app (app (fvar 3) (fvar 0)) (fplus (fvar 1) 1)) (fplus (fvar 2) (fvar 1)))
				//(fplus (fvar 0)
				//	(app (fvar 1) (fminus (fvar 0) 1)))
				(fvar 2)
				)))))
		1) 0) 0)
 done))

	// (F (push (app (app (
	// miu (fvar 2) (
	// 	lam (fvar 0) (lam (fvar 1) // TODO: trei parametri aici
	// 		(fite (fle 0 (fvar 0))
	// 			(app (app (fvar 2) (fminus (fvar 0) 1)) (fplus (fvar 1) (fvar 0)))
	// 			(fvar 1)
	// 		)
	// 	))
	// ) N ) I ) done))

	)
 with-base
     (pair (F (push SUM done)) (F (push SUM done)));


/*
show-simulation [100] in language and flanguage :
   (pair (IC (push 
		(seq (assign (var 0) 1)
		    (seq (assign (var 1) 2)
		        (assign (var 0) (plus (var 0) (var 1))))) done) ENV)
	(F (contextexp (app (app (lam (fvar 0) (lam (fvar 1) (fplus (fvar 0) (fvar 1)))) 2) 1))))
 with-base
     (pair (IC done ENV) (F (contextexp SUM))) /\ (mequals (lookup ENV 0) SUM);
*/
